/* Generated by Cython 0.15.1 on Sun Aug 12 23:52:44 2012 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#else

#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif

#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif

#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif

#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif

#if PY_VERSION_HEX < 0x02040000
  #define METH_COEXIST 0
  #define PyDict_CheckExact(op) (Py_TYPE(op) == &PyDict_Type)
  #define PyDict_Contains(d,o)   PySequence_Contains(d,o)
#endif

#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_AsInt(o)
  #define PyNumber_Index(o)    PyNumber_Int(o)
  #define PyIndex_Check(o)     PyNumber_Check(o)
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
#endif

#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)

  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;

  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)

#endif

#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#endif

#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif

#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif

#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)

#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif

#if PY_VERSION_HEX < 0x03020000
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__asciiParse
#define __PYX_HAVE_API__asciiParse
#include "asciiParsePrimitives.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif


/* inline attribute */
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif

/* unused attribute */
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || defined(__INTEL_COMPILER)
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif

typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/


/* Type Conversion Predeclarations */

#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))

#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))


#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "asciiParse.pyx",
};

/*--- Type declarations ---*/
struct __pyx_obj_10asciiParse_AsciiParseWrapper;
struct __pyx_opt_args_10asciiParse_17AsciiParseWrapper_readUntil;

/* "asciiParse.pyx":113
 *             return self.__oParser.readEOF()
 * 
 *       cpdef bint readUntil(self, c, delimitor = '\\'):             # <<<<<<<<<<<<<<
 *             """
 * 	    Consume the stream while the c byte is not read, else return false
 */
struct __pyx_opt_args_10asciiParse_17AsciiParseWrapper_readUntil {
  int __pyx_n;
  PyObject *delimitor;
};

/* "asciiParse.pyx":19
 * from asciiParsePrimitives cimport AsciiParse, PyString_FromStringAndSize, ccptr
 * 
 * cdef class AsciiParseWrapper:             # <<<<<<<<<<<<<<
 *       """
 *       A parsing primitive library.
 */
struct __pyx_obj_10asciiParse_AsciiParseWrapper {
  PyObject_HEAD
  struct __pyx_vtabstruct_10asciiParse_AsciiParseWrapper *__pyx_vtab;
  AsciiParse *__pyx___oParser;
  PyObject *__pyx___dTag;
  PyObject *__pyx___lStream;
  PyObject *__pyx___oRoot;
};



struct __pyx_vtabstruct_10asciiParse_AsciiParseWrapper {
  int (*peekChar)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, PyObject *, int __pyx_skip_dispatch);
  int (*readChar)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, PyObject *, int __pyx_skip_dispatch);
  int (*readEOF)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, int __pyx_skip_dispatch);
  int (*readUntil)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_10asciiParse_17AsciiParseWrapper_readUntil *__pyx_optional_args);
  int (*readUntilEOF)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, int __pyx_skip_dispatch);
  int (*peekText)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, char *, int __pyx_skip_dispatch);
  int (*readText)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, char *, int __pyx_skip_dispatch);
  int (*readInteger)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, int __pyx_skip_dispatch);
  int (*readIdentifier)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, int __pyx_skip_dispatch);
  int (*readRange)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, PyObject *, PyObject *, int __pyx_skip_dispatch);
  int (*readCString)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, int __pyx_skip_dispatch);
  int (*readCChar)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, int __pyx_skip_dispatch);
  int (*readAChar)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, int __pyx_skip_dispatch);
  int (*getColumnNbr)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, int __pyx_skip_dispatch);
  int (*getLineNbr)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, int __pyx_skip_dispatch);
  int (*getIndex)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, int __pyx_skip_dispatch);
  char (*getCurrentByte)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, int __pyx_skip_dispatch);
  PyObject *(*getName)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, int __pyx_skip_dispatch);
  PyObject *(*setTag)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, char *, int __pyx_skip_dispatch);
  PyObject *(*getTag)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, char *, int __pyx_skip_dispatch);
  PyObject *(*getCTag)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, char *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_10asciiParse_AsciiParseWrapper *__pyx_vtabptr_10asciiParse_AsciiParseWrapper;

#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif

#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
  #define __Pyx_RefNannySetupContext(name)           __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
  #define __Pyx_RefNannyFinishContext()           __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],     PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,     const char* function_name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

#include <string.h>

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause); /*proto*/

static CYTHON_INLINE PyObject* __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (PyList_Append(L, x) < 0) return NULL;
        Py_INCREF(Py_None);
        return Py_None; /* this is just to have an accurate signature */
    }
    else {
        PyObject *r, *m;
        m = __Pyx_GetAttrString(L, "append");
        if (!m) return NULL;
        r = PyObject_CallFunctionObjArgs(m, x, NULL);
        Py_DECREF(m);
        return r;
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyObject_Pop(PyObject* L) {
#if PY_VERSION_HEX >= 0x02040000
    if (likely(PyList_CheckExact(L))
            /* Check that both the size is positive and no reallocation shrinking needs to be done. */
            && likely(PyList_GET_SIZE(L) > (((PyListObject*)L)->allocated >> 1))) {
        Py_SIZE(L) -= 1;
        return PyList_GET_ITEM(L, PyList_GET_SIZE(L));
    }
#if PY_VERSION_HEX >= 0x02050000
    else if (Py_TYPE(L) == (&PySet_Type)) {
        return PySet_Pop(L);
    }
#endif
#endif
    return PyObject_CallMethod(L, (char*)"pop", NULL);
}


static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}


#define __Pyx_GetItemInt_List(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_List_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
            PyObject *r = PyList_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyList_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyList_GET_ITEM(o, PyList_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

#define __Pyx_GetItemInt_Tuple(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Tuple_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyTuple_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyTuple_GET_ITEM(o, PyTuple_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}


#define __Pyx_GetItemInt(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i) {
    PyObject *r;
    if (PyList_CheckExact(o) && ((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (PyTuple_CheckExact(o) && ((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (Py_TYPE(o)->tp_as_sequence && Py_TYPE(o)->tp_as_sequence->sq_item && (likely(i >= 0))) {
        r = PySequence_GetItem(o, i);
    }
    else {
        r = __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
    }
    return r;
}

static int __Pyx_Print(PyObject*, PyObject *, int); /*proto*/
#if PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

static int __Pyx_PrintOne(PyObject* stream, PyObject *o); /*proto*/

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename); /*proto*/

static int __Pyx_check_binary_version(void);

static int __Pyx_SetVtable(PyObject *dict, void *vtable); /*proto*/

static void __Pyx_AddTraceback(const char *funcname, int __pyx_clineno,
                               int __pyx_lineno, const char *__pyx_filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/

/* Module declarations from 'asciiParsePrimitives' */

/* Module declarations from 'asciiParse' */
static PyTypeObject *__pyx_ptype_10asciiParse_AsciiParseWrapper = 0;
#define __Pyx_MODULE_NAME "asciiParse"
int __pyx_module_is_main_asciiParse = 0;

/* Implementation of 'asciiParse' */
static PyObject *__pyx_builtin_exit;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_ord;
static char __pyx_k_1[] = "";
static char __pyx_k_2[] = " \r\n\t";
static char __pyx_k_3[] = "//";
static char __pyx_k_4[] = "/*";
static char __pyx_k_5[] = "*/";
static char __pyx_k_6[] = "Error : line comment open tag should be 1 character long at minimum";
static char __pyx_k_7[] = "Error : comment open tag and close tag should be 2 character long at minimum.";
static char __pyx_k_9[] = "readChar argument len was greater than one.";
static char __pyx_k_11[] = "\\";
static char __pyx_k_14[] = "<string>";
static char __pyx_k__c[] = "c";
static char __pyx_k__end[] = "end";
static char __pyx_k__ord[] = "ord";
static char __pyx_k__exit[] = "exit";
static char __pyx_k__name[] = "name";
static char __pyx_k__begin[] = "begin";
static char __pyx_k__sCEnd[] = "sCEnd";
static char __pyx_k__getTag[] = "getTag";
static char __pyx_k__ignore[] = "ignore";
static char __pyx_k__sCLine[] = "sCLine";
static char __pyx_k__setTag[] = "setTag";
static char __pyx_k__stream[] = "stream";
static char __pyx_k__getCTag[] = "getCTag";
static char __pyx_k__getName[] = "getName";
static char __pyx_k__readEOF[] = "readEOF";
static char __pyx_k__sCBegin[] = "sCBegin";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k__getIndex[] = "getIndex";
static char __pyx_k__peekChar[] = "peekChar";
static char __pyx_k__peekText[] = "peekText";
static char __pyx_k__readChar[] = "readChar";
static char __pyx_k__readText[] = "readText";
static char __pyx_k__TypeError[] = "TypeError";
static char __pyx_k__delimitor[] = "delimitor";
static char __pyx_k__newStream[] = "newStream";
static char __pyx_k__readAChar[] = "readAChar";
static char __pyx_k__readCChar[] = "readCChar";
static char __pyx_k__readRange[] = "readRange";
static char __pyx_k__readUntil[] = "readUntil";
static char __pyx_k__setWsList[] = "setWsList";
static char __pyx_k__getLineNbr[] = "getLineNbr";
static char __pyx_k__readCString[] = "readCString";
static char __pyx_k__readInteger[] = "readInteger";
static char __pyx_k__getColumnNbr[] = "getColumnNbr";
static char __pyx_k__readUntilEOF[] = "readUntilEOF";
static char __pyx_k__getCurrentByte[] = "getCurrentByte";
static char __pyx_k__readIdentifier[] = "readIdentifier";
static PyObject *__pyx_kp_s_1;
static PyObject *__pyx_kp_s_11;
static PyObject *__pyx_kp_s_2;
static PyObject *__pyx_kp_s_6;
static PyObject *__pyx_kp_s_7;
static PyObject *__pyx_kp_s_9;
static PyObject *__pyx_n_s__TypeError;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s__begin;
static PyObject *__pyx_n_s__c;
static PyObject *__pyx_n_s__delimitor;
static PyObject *__pyx_n_s__end;
static PyObject *__pyx_n_s__exit;
static PyObject *__pyx_n_s__getCTag;
static PyObject *__pyx_n_s__getColumnNbr;
static PyObject *__pyx_n_s__getCurrentByte;
static PyObject *__pyx_n_s__getIndex;
static PyObject *__pyx_n_s__getLineNbr;
static PyObject *__pyx_n_s__getName;
static PyObject *__pyx_n_s__getTag;
static PyObject *__pyx_n_s__ignore;
static PyObject *__pyx_n_s__name;
static PyObject *__pyx_n_s__newStream;
static PyObject *__pyx_n_s__ord;
static PyObject *__pyx_n_s__peekChar;
static PyObject *__pyx_n_s__peekText;
static PyObject *__pyx_n_s__readAChar;
static PyObject *__pyx_n_s__readCChar;
static PyObject *__pyx_n_s__readCString;
static PyObject *__pyx_n_s__readChar;
static PyObject *__pyx_n_s__readEOF;
static PyObject *__pyx_n_s__readIdentifier;
static PyObject *__pyx_n_s__readInteger;
static PyObject *__pyx_n_s__readRange;
static PyObject *__pyx_n_s__readText;
static PyObject *__pyx_n_s__readUntil;
static PyObject *__pyx_n_s__readUntilEOF;
static PyObject *__pyx_n_s__sCBegin;
static PyObject *__pyx_n_s__sCEnd;
static PyObject *__pyx_n_s__sCLine;
static PyObject *__pyx_n_s__setTag;
static PyObject *__pyx_n_s__setWsList;
static PyObject *__pyx_n_s__stream;
static PyObject *__pyx_int_1;
static PyObject *__pyx_k_tuple_8;
static PyObject *__pyx_k_tuple_10;
static PyObject *__pyx_k_tuple_12;
static PyObject *__pyx_k_tuple_13;

/* "asciiParse.pyx":28
 *       cdef object      __oRoot
 * 
 *       def __init__(self\             # <<<<<<<<<<<<<<
 * 		   ,char* stream = ""\
 * 		   ,char* ignore = " \r\n\t"\
 */

static int __pyx_pf_10asciiParse_17AsciiParseWrapper___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10asciiParse_17AsciiParseWrapper___init__[] = " Python initialisation. ";
struct wrapperbase __pyx_wrapperbase_10asciiParse_17AsciiParseWrapper___init__;
static int __pyx_pf_10asciiParse_17AsciiParseWrapper___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_stream;
  char *__pyx_v_ignore;
  char *__pyx_v_sCLine;
  char *__pyx_v_sCBegin;
  char *__pyx_v_sCEnd;
  PyObject *__pyx_v_sStr = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__stream,&__pyx_n_s__ignore,&__pyx_n_s__sCLine,&__pyx_n_s__sCBegin,&__pyx_n_s__sCEnd,0};
  __Pyx_RefNannySetupContext("__init__");
  {
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__stream);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ignore);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sCLine);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sCBegin);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sCEnd);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_stream = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_stream) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_stream = ((char *)__pyx_k_1);
    }
    if (values[1]) {
      __pyx_v_ignore = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_ignore) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_ignore = ((char *)__pyx_k_2);
    }
    if (values[2]) {
      __pyx_v_sCLine = PyBytes_AsString(values[2]); if (unlikely((!__pyx_v_sCLine) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_sCLine = ((char *)__pyx_k_3);
    }
    if (values[3]) {
      __pyx_v_sCBegin = PyBytes_AsString(values[3]); if (unlikely((!__pyx_v_sCBegin) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_sCBegin = ((char *)__pyx_k_4);
    }
    if (values[4]) {
      __pyx_v_sCEnd = PyBytes_AsString(values[4]); if (unlikely((!__pyx_v_sCEnd) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_sCEnd = ((char *)__pyx_k_5);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "asciiParse.pyx":36
 *           """ Python initialisation. """
 * 
 *           if len(sCLine) == 0:             # <<<<<<<<<<<<<<
 *             print\
 *       'Error : line comment open tag should be 1 character long at minimum'
 */
  __pyx_t_1 = strlen(__pyx_v_sCLine); 
  __pyx_t_2 = (__pyx_t_1 == 0);
  if (__pyx_t_2) {

    /* "asciiParse.pyx":37
 * 
 *           if len(sCLine) == 0:
 *             print\             # <<<<<<<<<<<<<<
 *       'Error : line comment open tag should be 1 character long at minimum'
 * 
 */
    if (__Pyx_PrintOne(0, ((PyObject *)__pyx_kp_s_6)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "asciiParse.pyx":40
 *       'Error : line comment open tag should be 1 character long at minimum'
 * 
 *           if len(sCBegin) < 2\             # <<<<<<<<<<<<<<
 *            or len(sCEnd) < 2:
 *              print\
 */
  __pyx_t_1 = strlen(__pyx_v_sCBegin); 
  __pyx_t_2 = (__pyx_t_1 < 2);
  if (!__pyx_t_2) {

    /* "asciiParse.pyx":41
 * 
 *           if len(sCBegin) < 2\
 *            or len(sCEnd) < 2:             # <<<<<<<<<<<<<<
 *              print\
 *       'Error : comment open tag and close tag should be 2 character long at minimum.'
 */
    __pyx_t_1 = strlen(__pyx_v_sCEnd); 
    __pyx_t_3 = (__pyx_t_1 < 2);
    __pyx_t_4 = __pyx_t_3;
  } else {
    __pyx_t_4 = __pyx_t_2;
  }
  if (__pyx_t_4) {

    /* "asciiParse.pyx":42
 *           if len(sCBegin) < 2\
 *            or len(sCEnd) < 2:
 *              print\             # <<<<<<<<<<<<<<
 *       'Error : comment open tag and close tag should be 2 character long at minimum.'
 *              exit(1)
 */
    if (__Pyx_PrintOne(0, ((PyObject *)__pyx_kp_s_7)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "asciiParse.pyx":44
 *              print\
 *       'Error : comment open tag and close tag should be 2 character long at minimum.'
 *              exit(1)             # <<<<<<<<<<<<<<
 * 
 * ##### private:
 */
    __pyx_t_5 = PyObject_Call(__pyx_builtin_exit, ((PyObject *)__pyx_k_tuple_8), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "asciiParse.pyx":47
 * 
 * ##### private:
 *           cdef str sStr = stream             # <<<<<<<<<<<<<<
 *           self.__oParser = new AsciiParse(stream, ignore, sCLine, sCBegin, sCEnd)
 *           self.__dTag = {}
 */
  __pyx_t_5 = PyBytes_FromString(__pyx_v_stream); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_5));
  if (!(likely(PyString_CheckExact(((PyObject *)__pyx_t_5)))||(PyErr_Format(PyExc_TypeError, "Expected str, got %.200s", Py_TYPE(((PyObject *)__pyx_t_5))->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_sStr = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "asciiParse.pyx":48
 * ##### private:
 *           cdef str sStr = stream
 *           self.__oParser = new AsciiParse(stream, ignore, sCLine, sCBegin, sCEnd)             # <<<<<<<<<<<<<<
 *           self.__dTag = {}
 *           self.__lStream = [sStr]
 */
  ((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx___oParser = new AsciiParse(__pyx_v_stream, __pyx_v_ignore, __pyx_v_sCLine, __pyx_v_sCBegin, __pyx_v_sCEnd);

  /* "asciiParse.pyx":49
 *           cdef str sStr = stream
 *           self.__oParser = new AsciiParse(stream, ignore, sCLine, sCBegin, sCEnd)
 *           self.__dTag = {}             # <<<<<<<<<<<<<<
 *           self.__lStream = [sStr]
 *           self.__oRoot = None
 */
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_5));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_5));
  __Pyx_GOTREF(((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx___dTag);
  __Pyx_DECREF(((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx___dTag);
  ((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx___dTag = ((PyObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "asciiParse.pyx":50
 *           self.__oParser = new AsciiParse(stream, ignore, sCLine, sCBegin, sCEnd)
 *           self.__dTag = {}
 *           self.__lStream = [sStr]             # <<<<<<<<<<<<<<
 *           self.__oRoot = None
 * 
 */
  __pyx_t_5 = PyList_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_5));
  __Pyx_INCREF(((PyObject *)__pyx_v_sStr));
  PyList_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_sStr));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_sStr));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_5));
  __Pyx_GOTREF(((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx___lStream);
  __Pyx_DECREF(((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx___lStream);
  ((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx___lStream = ((PyObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "asciiParse.pyx":51
 *           self.__dTag = {}
 *           self.__lStream = [sStr]
 *           self.__oRoot = None             # <<<<<<<<<<<<<<
 * 
 * ##### public:
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx___oRoot);
  __Pyx_DECREF(((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx___oRoot);
  ((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx___oRoot = Py_None;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_sStr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":55
 * ##### public:
 * 
 *       def __dealloc__(self):             # <<<<<<<<<<<<<<
 *           """ .Dtor """
 *           del self.__oParser
 */

static void __pyx_pf_10asciiParse_17AsciiParseWrapper_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_10asciiParse_17AsciiParseWrapper_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "asciiParse.pyx":57
 *       def __dealloc__(self):
 *           """ .Dtor """
 *           del self.__oParser             # <<<<<<<<<<<<<<
 * 
 *       def root(self):
 */
  delete ((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx___oParser;

  __Pyx_RefNannyFinishContext();
}

/* "asciiParse.pyx":59
 *           del self.__oParser
 * 
 *       def root(self):             # <<<<<<<<<<<<<<
 *           return self.__oRoot
 * 
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_2root(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_2root(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("root");

  /* "asciiParse.pyx":60
 * 
 *       def root(self):
 *           return self.__oRoot             # <<<<<<<<<<<<<<
 * 
 *       def setRoot(self, oRoot):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx___oRoot);
  __pyx_r = ((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx___oRoot;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":62
 *           return self.__oRoot
 * 
 *       def setRoot(self, oRoot):             # <<<<<<<<<<<<<<
 *           self.__oRoot = oRoot
 * 
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_3setRoot(PyObject *__pyx_v_self, PyObject *__pyx_v_oRoot); /*proto*/
static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_3setRoot(PyObject *__pyx_v_self, PyObject *__pyx_v_oRoot) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setRoot");

  /* "asciiParse.pyx":63
 * 
 *       def setRoot(self, oRoot):
 *           self.__oRoot = oRoot             # <<<<<<<<<<<<<<
 * 
 *       def readComment(self):
 */
  __Pyx_INCREF(__pyx_v_oRoot);
  __Pyx_GIVEREF(__pyx_v_oRoot);
  __Pyx_GOTREF(((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx___oRoot);
  __Pyx_DECREF(((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx___oRoot);
  ((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx___oRoot = __pyx_v_oRoot;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":65
 *           self.__oRoot = oRoot
 * 
 *       def readComment(self):             # <<<<<<<<<<<<<<
 *           """
 * 	  Consume all that is between and open and a close comment tag.
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_4readComment(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10asciiParse_17AsciiParseWrapper_4readComment[] = "\n\t  Consume all that is between and open and a close comment tag.\n\t  ";
static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_4readComment(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readComment");

  /* "asciiParse.pyx":69
 * 	  Consume all that is between and open and a close comment tag.
 * 	  """
 *           self.__oParser.readComment()             # <<<<<<<<<<<<<<
 * 
 *       def readIgnored(self):
 */
  ((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx___oParser->readComment();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":71
 *           self.__oParser.readComment()
 * 
 *       def readIgnored(self):             # <<<<<<<<<<<<<<
 *           """
 * 	  Consume comments and whitespace characters.
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_5readIgnored(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10asciiParse_17AsciiParseWrapper_5readIgnored[] = "\n\t  Consume comments and whitespace characters.\n\t  ";
static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_5readIgnored(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readIgnored");

  /* "asciiParse.pyx":75
 * 	  Consume comments and whitespace characters.
 * 	  """
 *           self.__oParser.readIgnored()             # <<<<<<<<<<<<<<
 * 
 *       def readWs(self):
 */
  ((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx___oParser->readIgnored();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":77
 *           self.__oParser.readIgnored()
 * 
 *       def readWs(self):             # <<<<<<<<<<<<<<
 *           """
 * 	  Consume head byte while it is contained in the WS liste.
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_6readWs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10asciiParse_17AsciiParseWrapper_6readWs[] = "\n\t  Consume head byte while it is contained in the WS liste.\n\t  ";
static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_6readWs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readWs");

  /* "asciiParse.pyx":81
 * 	  Consume head byte while it is contained in the WS liste.
 * 	  """
 *           self.__oParser.readWs()             # <<<<<<<<<<<<<<
 *           return True
 * 
 */
  ((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx___oParser->readWs();

  /* "asciiParse.pyx":82
 * 	  """
 *           self.__oParser.readWs()
 *           return True             # <<<<<<<<<<<<<<
 * 
 *       def lastRead(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.readWs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":84
 *           return True
 * 
 *       def lastRead(self):             # <<<<<<<<<<<<<<
 *           """
 * 	  Return last Consumed byte
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_7lastRead(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10asciiParse_17AsciiParseWrapper_7lastRead[] = "\n\t  Return last Consumed byte\n\t  ";
static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_7lastRead(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lastRead");

  /* "asciiParse.pyx":88
 * 	  Return last Consumed byte
 * 	  """
 *           return self.__oParser.lastRead()             # <<<<<<<<<<<<<<
 * 
 *       cpdef bint	peekChar(self, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx___oParser->lastRead()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.lastRead", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":90
 *           return self.__oParser.lastRead()
 * 
 *       cpdef bint	peekChar(self, c):             # <<<<<<<<<<<<<<
 *             """
 * 	    Test if head byte is equal to c and return true else return false.
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_8peekChar(PyObject *__pyx_v_self, PyObject *__pyx_v_c); /*proto*/
static int __pyx_f_10asciiParse_17AsciiParseWrapper_peekChar(struct __pyx_obj_10asciiParse_AsciiParseWrapper *__pyx_v_self, PyObject *__pyx_v_c, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  char __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("peekChar");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__peekChar); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_10asciiParse_17AsciiParseWrapper_8peekChar)) {
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_2));
      __Pyx_INCREF(__pyx_v_c);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_c);
      __Pyx_GIVEREF(__pyx_v_c);
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
      __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_4;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "asciiParse.pyx":94
 * 	    Test if head byte is equal to c and return true else return false.
 * 	    """
 *             if (len(c) != 1):             # <<<<<<<<<<<<<<
 *               raise TypeError
 *             return self.__oParser.peekChar(ord(c))
 */
  __pyx_t_5 = PyObject_Length(__pyx_v_c); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = (__pyx_t_5 != 1);
  if (__pyx_t_4) {

    /* "asciiParse.pyx":95
 * 	    """
 *             if (len(c) != 1):
 *               raise TypeError             # <<<<<<<<<<<<<<
 *             return self.__oParser.peekChar(ord(c))
 * 
 */
    __Pyx_Raise(__pyx_builtin_TypeError, 0, 0, 0);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "asciiParse.pyx":96
 *             if (len(c) != 1):
 *               raise TypeError
 *             return self.__oParser.peekChar(ord(c))             # <<<<<<<<<<<<<<
 * 
 *       cpdef bint readChar(self, c):
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(__pyx_v_c);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_c);
  __Pyx_GIVEREF(__pyx_v_c);
  __pyx_t_3 = PyObject_Call(__pyx_builtin_ord, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyInt_AsChar(__pyx_t_3); if (unlikely((__pyx_t_6 == (char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_v_self->__pyx___oParser->peekChar(__pyx_t_6);
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("asciiParse.AsciiParseWrapper.peekChar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":90
 *           return self.__oParser.lastRead()
 * 
 *       cpdef bint	peekChar(self, c):             # <<<<<<<<<<<<<<
 *             """
 * 	    Test if head byte is equal to c and return true else return false.
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_8peekChar(PyObject *__pyx_v_self, PyObject *__pyx_v_c); /*proto*/
static char __pyx_doc_10asciiParse_17AsciiParseWrapper_8peekChar[] = "\n\t    Test if head byte is equal to c and return true else return false.\n\t    ";
static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_8peekChar(PyObject *__pyx_v_self, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("peekChar");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(((struct __pyx_vtabstruct_10asciiParse_AsciiParseWrapper *)((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx_vtab)->peekChar(((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self), __pyx_v_c, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.peekChar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":98
 *             return self.__oParser.peekChar(ord(c))
 * 
 *       cpdef bint readChar(self, c):             # <<<<<<<<<<<<<<
 *             """
 * 	    Consume the c head byte, increment current index and return True
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_9readChar(PyObject *__pyx_v_self, PyObject *__pyx_v_c); /*proto*/
static int __pyx_f_10asciiParse_17AsciiParseWrapper_readChar(struct __pyx_obj_10asciiParse_AsciiParseWrapper *__pyx_v_self, PyObject *__pyx_v_c, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  char __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readChar");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__readChar); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_10asciiParse_17AsciiParseWrapper_9readChar)) {
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_2));
      __Pyx_INCREF(__pyx_v_c);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_c);
      __Pyx_GIVEREF(__pyx_v_c);
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
      __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_4;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "asciiParse.pyx":103
 * 	    else return False. It use peekchar and it's the same as '' in BNF.
 * 	    """
 *             if (len(c) != 1):             # <<<<<<<<<<<<<<
 *               raise TypeError('readChar argument len was greater than one.')
 *             return self.__oParser.readChar(ord(c))
 */
  __pyx_t_5 = PyObject_Length(__pyx_v_c); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = (__pyx_t_5 != 1);
  if (__pyx_t_4) {

    /* "asciiParse.pyx":104
 * 	    """
 *             if (len(c) != 1):
 *               raise TypeError('readChar argument len was greater than one.')             # <<<<<<<<<<<<<<
 *             return self.__oParser.readChar(ord(c))
 * 
 */
    __pyx_t_1 = PyObject_Call(__pyx_builtin_TypeError, ((PyObject *)__pyx_k_tuple_10), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "asciiParse.pyx":105
 *             if (len(c) != 1):
 *               raise TypeError('readChar argument len was greater than one.')
 *             return self.__oParser.readChar(ord(c))             # <<<<<<<<<<<<<<
 * 
 *       cpdef bint readEOF(self):
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(__pyx_v_c);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_c);
  __Pyx_GIVEREF(__pyx_v_c);
  __pyx_t_3 = PyObject_Call(__pyx_builtin_ord, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyInt_AsChar(__pyx_t_3); if (unlikely((__pyx_t_6 == (char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_v_self->__pyx___oParser->readChar(__pyx_t_6);
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("asciiParse.AsciiParseWrapper.readChar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":98
 *             return self.__oParser.peekChar(ord(c))
 * 
 *       cpdef bint readChar(self, c):             # <<<<<<<<<<<<<<
 *             """
 * 	    Consume the c head byte, increment current index and return True
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_9readChar(PyObject *__pyx_v_self, PyObject *__pyx_v_c); /*proto*/
static char __pyx_doc_10asciiParse_17AsciiParseWrapper_9readChar[] = "\n\t    Consume the c head byte, increment current index and return True\n\t    else return False. It use peekchar and it's the same as '' in BNF.\n\t    ";
static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_9readChar(PyObject *__pyx_v_self, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readChar");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(((struct __pyx_vtabstruct_10asciiParse_AsciiParseWrapper *)((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx_vtab)->readChar(((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self), __pyx_v_c, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.readChar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":107
 *             return self.__oParser.readChar(ord(c))
 * 
 *       cpdef bint readEOF(self):             # <<<<<<<<<<<<<<
 *             """
 * 	    Returns true if reach end of the stream.
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_10readEOF(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_10asciiParse_17AsciiParseWrapper_readEOF(struct __pyx_obj_10asciiParse_AsciiParseWrapper *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readEOF");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__readEOF); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_10asciiParse_17AsciiParseWrapper_10readEOF)) {
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "asciiParse.pyx":111
 * 	    Returns true if reach end of the stream.
 * 	    """
 *             return self.__oParser.readEOF()             # <<<<<<<<<<<<<<
 * 
 *       cpdef bint readUntil(self, c, delimitor = '\\'):
 */
  __pyx_r = __pyx_v_self->__pyx___oParser->readEOF();
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("asciiParse.AsciiParseWrapper.readEOF", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":107
 *             return self.__oParser.readChar(ord(c))
 * 
 *       cpdef bint readEOF(self):             # <<<<<<<<<<<<<<
 *             """
 * 	    Returns true if reach end of the stream.
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_10readEOF(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10asciiParse_17AsciiParseWrapper_10readEOF[] = "\n\t    Returns true if reach end of the stream.\n\t    ";
static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_10readEOF(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readEOF");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(((struct __pyx_vtabstruct_10asciiParse_AsciiParseWrapper *)((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx_vtab)->readEOF(((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self), 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.readEOF", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":113
 *             return self.__oParser.readEOF()
 * 
 *       cpdef bint readUntil(self, c, delimitor = '\\'):             # <<<<<<<<<<<<<<
 *             """
 * 	    Consume the stream while the c byte is not read, else return false
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_11readUntil(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_10asciiParse_17AsciiParseWrapper_readUntil(struct __pyx_obj_10asciiParse_AsciiParseWrapper *__pyx_v_self, PyObject *__pyx_v_c, int __pyx_skip_dispatch, struct __pyx_opt_args_10asciiParse_17AsciiParseWrapper_readUntil *__pyx_optional_args) {
  PyObject *__pyx_v_delimitor = ((PyObject *)__pyx_kp_s_11);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  char __pyx_t_8;
  char __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readUntil");
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_delimitor = __pyx_optional_args->delimitor;
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__readUntil); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_10asciiParse_17AsciiParseWrapper_11readUntil)) {
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_2));
      __Pyx_INCREF(__pyx_v_c);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_c);
      __Pyx_GIVEREF(__pyx_v_c);
      __Pyx_INCREF(__pyx_v_delimitor);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_delimitor);
      __Pyx_GIVEREF(__pyx_v_delimitor);
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
      __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_4;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "asciiParse.pyx":118
 * 	    ex : if stream is " abcdef ", readUntil("d"); consume "abcd".
 * 	    """
 *             if (len(c) != 1 or len(delimitor) != 1):             # <<<<<<<<<<<<<<
 *               raise TypeError
 *             return self.__oParser.readUntil(ord(c), ord(delimitor))
 */
  __pyx_t_5 = PyObject_Length(__pyx_v_c); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = (__pyx_t_5 != 1);
  if (!__pyx_t_4) {
    __pyx_t_5 = PyObject_Length(__pyx_v_delimitor); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_6 = (__pyx_t_5 != 1);
    __pyx_t_7 = __pyx_t_6;
  } else {
    __pyx_t_7 = __pyx_t_4;
  }
  if (__pyx_t_7) {

    /* "asciiParse.pyx":119
 * 	    """
 *             if (len(c) != 1 or len(delimitor) != 1):
 *               raise TypeError             # <<<<<<<<<<<<<<
 *             return self.__oParser.readUntil(ord(c), ord(delimitor))
 * 
 */
    __Pyx_Raise(__pyx_builtin_TypeError, 0, 0, 0);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "asciiParse.pyx":120
 *             if (len(c) != 1 or len(delimitor) != 1):
 *               raise TypeError
 *             return self.__oParser.readUntil(ord(c), ord(delimitor))             # <<<<<<<<<<<<<<
 * 
 *       cpdef bint readUntilEOF(self):
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(__pyx_v_c);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_c);
  __Pyx_GIVEREF(__pyx_v_c);
  __pyx_t_3 = PyObject_Call(__pyx_builtin_ord, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_8 = __Pyx_PyInt_AsChar(__pyx_t_3); if (unlikely((__pyx_t_8 == (char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_INCREF(__pyx_v_delimitor);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_delimitor);
  __Pyx_GIVEREF(__pyx_v_delimitor);
  __pyx_t_1 = PyObject_Call(__pyx_builtin_ord, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_t_9 = __Pyx_PyInt_AsChar(__pyx_t_1); if (unlikely((__pyx_t_9 == (char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_v_self->__pyx___oParser->readUntil(__pyx_t_8, __pyx_t_9);
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("asciiParse.AsciiParseWrapper.readUntil", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":113
 *             return self.__oParser.readEOF()
 * 
 *       cpdef bint readUntil(self, c, delimitor = '\\'):             # <<<<<<<<<<<<<<
 *             """
 * 	    Consume the stream while the c byte is not read, else return false
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_11readUntil(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10asciiParse_17AsciiParseWrapper_11readUntil[] = "\n\t    Consume the stream while the c byte is not read, else return false\n\t    ex : if stream is \" abcdef \", readUntil(\"d\"); consume \"abcd\".\n\t    ";
static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_11readUntil(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_c = 0;
  PyObject *__pyx_v_delimitor = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  struct __pyx_opt_args_10asciiParse_17AsciiParseWrapper_readUntil __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__c,&__pyx_n_s__delimitor,0};
  __Pyx_RefNannySetupContext("readUntil");
  {
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)__pyx_kp_s_11);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__c);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__delimitor);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "readUntil") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_c = values[0];
    __pyx_v_delimitor = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readUntil", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.readUntil", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.delimitor = __pyx_v_delimitor;
  __pyx_t_1 = ((struct __pyx_vtabstruct_10asciiParse_AsciiParseWrapper *)((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx_vtab)->readUntil(((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self), __pyx_v_c, 1, &__pyx_t_2); 
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.readUntil", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":122
 *             return self.__oParser.readUntil(ord(c), ord(delimitor))
 * 
 *       cpdef bint readUntilEOF(self):             # <<<<<<<<<<<<<<
 *             """
 * 	    Consume all the stream. Same as EOF in BNF
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_12readUntilEOF(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_10asciiParse_17AsciiParseWrapper_readUntilEOF(struct __pyx_obj_10asciiParse_AsciiParseWrapper *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readUntilEOF");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__readUntilEOF); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_10asciiParse_17AsciiParseWrapper_12readUntilEOF)) {
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "asciiParse.pyx":126
 * 	    Consume all the stream. Same as EOF in BNF
 * 	    """
 *             return self.__oParser.readUntilEOF()             # <<<<<<<<<<<<<<
 * 
 *       cpdef bint peekText(self, char* text):
 */
  __pyx_r = __pyx_v_self->__pyx___oParser->readUntilEOF();
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("asciiParse.AsciiParseWrapper.readUntilEOF", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":122
 *             return self.__oParser.readUntil(ord(c), ord(delimitor))
 * 
 *       cpdef bint readUntilEOF(self):             # <<<<<<<<<<<<<<
 *             """
 * 	    Consume all the stream. Same as EOF in BNF
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_12readUntilEOF(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10asciiParse_17AsciiParseWrapper_12readUntilEOF[] = "\n\t    Consume all the stream. Same as EOF in BNF\n\t    ";
static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_12readUntilEOF(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readUntilEOF");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(((struct __pyx_vtabstruct_10asciiParse_AsciiParseWrapper *)((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx_vtab)->readUntilEOF(((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self), 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.readUntilEOF", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":128
 *             return self.__oParser.readUntilEOF()
 * 
 *       cpdef bint peekText(self, char* text):             # <<<<<<<<<<<<<<
 *             """
 * 	    Same as readText but doesn't consume the stream.
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_13peekText(PyObject *__pyx_v_self, PyObject *__pyx_arg_text); /*proto*/
static int __pyx_f_10asciiParse_17AsciiParseWrapper_peekText(struct __pyx_obj_10asciiParse_AsciiParseWrapper *__pyx_v_self, char *__pyx_v_text, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("peekText");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__peekText); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_10asciiParse_17AsciiParseWrapper_13peekText)) {
      __pyx_t_2 = PyBytes_FromString(__pyx_v_text); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_2));
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_t_2));
      __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
      __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_4;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "asciiParse.pyx":132
 * 	    Same as readText but doesn't consume the stream.
 * 	    """
 *             return self.__oParser.peekText(text)             # <<<<<<<<<<<<<<
 * 
 *       cpdef bint readText(self, char* text):
 */
  __pyx_r = __pyx_v_self->__pyx___oParser->peekText(__pyx_v_text);
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("asciiParse.AsciiParseWrapper.peekText", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":128
 *             return self.__oParser.readUntilEOF()
 * 
 *       cpdef bint peekText(self, char* text):             # <<<<<<<<<<<<<<
 *             """
 * 	    Same as readText but doesn't consume the stream.
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_13peekText(PyObject *__pyx_v_self, PyObject *__pyx_arg_text); /*proto*/
static char __pyx_doc_10asciiParse_17AsciiParseWrapper_13peekText[] = "\n\t    Same as readText but doesn't consume the stream.\n\t    ";
static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_13peekText(PyObject *__pyx_v_self, PyObject *__pyx_arg_text) {
  char *__pyx_v_text;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("peekText");
  assert(__pyx_arg_text); {
    __pyx_v_text = PyBytes_AsString(__pyx_arg_text); if (unlikely((!__pyx_v_text) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.peekText", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(((struct __pyx_vtabstruct_10asciiParse_AsciiParseWrapper *)((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx_vtab)->peekText(((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self), __pyx_v_text, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.peekText", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":134
 *             return self.__oParser.peekText(text)
 * 
 *       cpdef bint readText(self, char* text):             # <<<<<<<<<<<<<<
 *             """
 * 	    Consume a strlen(text) text at current position in the stream
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_14readText(PyObject *__pyx_v_self, PyObject *__pyx_arg_text); /*proto*/
static int __pyx_f_10asciiParse_17AsciiParseWrapper_readText(struct __pyx_obj_10asciiParse_AsciiParseWrapper *__pyx_v_self, char *__pyx_v_text, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readText");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__readText); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_10asciiParse_17AsciiParseWrapper_14readText)) {
      __pyx_t_2 = PyBytes_FromString(__pyx_v_text); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_2));
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_t_2));
      __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
      __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_4;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "asciiParse.pyx":141
 * 	    ex : readText("ls");.
 * 	    """
 *             return self.__oParser.readText(text)             # <<<<<<<<<<<<<<
 * 
 *       cpdef bint readInteger(self):
 */
  __pyx_r = __pyx_v_self->__pyx___oParser->readText(__pyx_v_text);
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("asciiParse.AsciiParseWrapper.readText", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":134
 *             return self.__oParser.peekText(text)
 * 
 *       cpdef bint readText(self, char* text):             # <<<<<<<<<<<<<<
 *             """
 * 	    Consume a strlen(text) text at current position in the stream
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_14readText(PyObject *__pyx_v_self, PyObject *__pyx_arg_text); /*proto*/
static char __pyx_doc_10asciiParse_17AsciiParseWrapper_14readText[] = "\n\t    Consume a strlen(text) text at current position in the stream\n\t    else return False.\n\t    Same as \"\" in BNF\n\t    ex : readText(\"ls\");.\n\t    ";
static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_14readText(PyObject *__pyx_v_self, PyObject *__pyx_arg_text) {
  char *__pyx_v_text;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readText");
  assert(__pyx_arg_text); {
    __pyx_v_text = PyBytes_AsString(__pyx_arg_text); if (unlikely((!__pyx_v_text) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.readText", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(((struct __pyx_vtabstruct_10asciiParse_AsciiParseWrapper *)((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx_vtab)->readText(((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self), __pyx_v_text, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.readText", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":143
 *             return self.__oParser.readText(text)
 * 
 *       cpdef bint readInteger(self):             # <<<<<<<<<<<<<<
 *             """
 * 	    Read following BNF rule else return False
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_15readInteger(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_10asciiParse_17AsciiParseWrapper_readInteger(struct __pyx_obj_10asciiParse_AsciiParseWrapper *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readInteger");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__readInteger); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_10asciiParse_17AsciiParseWrapper_15readInteger)) {
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "asciiParse.pyx":148
 * 	    readInteger ::= ['0'..'9']+ ;
 * 	    """
 *             return self.__oParser.readInteger()             # <<<<<<<<<<<<<<
 * 
 *       cpdef bint readIdentifier(self):
 */
  __pyx_r = __pyx_v_self->__pyx___oParser->readInteger();
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("asciiParse.AsciiParseWrapper.readInteger", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":143
 *             return self.__oParser.readText(text)
 * 
 *       cpdef bint readInteger(self):             # <<<<<<<<<<<<<<
 *             """
 * 	    Read following BNF rule else return False
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_15readInteger(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10asciiParse_17AsciiParseWrapper_15readInteger[] = "\n\t    Read following BNF rule else return False\n\t    readInteger ::= ['0'..'9']+ ;\n\t    ";
static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_15readInteger(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readInteger");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(((struct __pyx_vtabstruct_10asciiParse_AsciiParseWrapper *)((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx_vtab)->readInteger(((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self), 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.readInteger", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":150
 *             return self.__oParser.readInteger()
 * 
 *       cpdef bint readIdentifier(self):             # <<<<<<<<<<<<<<
 *             """
 * 	    Read following BNF rule else return False
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_16readIdentifier(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_10asciiParse_17AsciiParseWrapper_readIdentifier(struct __pyx_obj_10asciiParse_AsciiParseWrapper *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readIdentifier");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__readIdentifier); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_10asciiParse_17AsciiParseWrapper_16readIdentifier)) {
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "asciiParse.pyx":155
 * 	    readIdentifier ::= ['a'..'z'|'A'..'Z'|'_']['0'..'9'|'a'..'z'|'A'..'Z'|'_']* ;
 * 	    """
 *             return self.__oParser.readIdentifier()             # <<<<<<<<<<<<<<
 * 
 *       cpdef bint readRange(self, begin, end):
 */
  __pyx_r = __pyx_v_self->__pyx___oParser->readIdentifier();
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("asciiParse.AsciiParseWrapper.readIdentifier", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":150
 *             return self.__oParser.readInteger()
 * 
 *       cpdef bint readIdentifier(self):             # <<<<<<<<<<<<<<
 *             """
 * 	    Read following BNF rule else return False
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_16readIdentifier(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10asciiParse_17AsciiParseWrapper_16readIdentifier[] = "\n\t    Read following BNF rule else return False\n\t    readIdentifier ::= ['a'..'z'|'A'..'Z'|'_']['0'..'9'|'a'..'z'|'A'..'Z'|'_']* ;\n\t    ";
static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_16readIdentifier(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readIdentifier");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(((struct __pyx_vtabstruct_10asciiParse_AsciiParseWrapper *)((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx_vtab)->readIdentifier(((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self), 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.readIdentifier", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":157
 *             return self.__oParser.readIdentifier()
 * 
 *       cpdef bint readRange(self, begin, end):             # <<<<<<<<<<<<<<
 *             """
 * 	    Consume head byte if it is >= begin and <= end else return false
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_17readRange(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_10asciiParse_17AsciiParseWrapper_readRange(struct __pyx_obj_10asciiParse_AsciiParseWrapper *__pyx_v_self, PyObject *__pyx_v_begin, PyObject *__pyx_v_end, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  char __pyx_t_5;
  char __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readRange");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__readRange); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_10asciiParse_17AsciiParseWrapper_17readRange)) {
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_2));
      __Pyx_INCREF(__pyx_v_begin);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_begin);
      __Pyx_GIVEREF(__pyx_v_begin);
      __Pyx_INCREF(__pyx_v_end);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_end);
      __Pyx_GIVEREF(__pyx_v_end);
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
      __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_4;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "asciiParse.pyx":162
 * 	    Same as 'a'..'z' in BNF
 * 	    """
 *             return self.__oParser.readRange(ord(begin), ord(end))             # <<<<<<<<<<<<<<
 * 
 *       cpdef bint readCString(self):
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(__pyx_v_begin);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_begin);
  __Pyx_GIVEREF(__pyx_v_begin);
  __pyx_t_3 = PyObject_Call(__pyx_builtin_ord, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyInt_AsChar(__pyx_t_3); if (unlikely((__pyx_t_5 == (char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_INCREF(__pyx_v_end);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_end);
  __Pyx_GIVEREF(__pyx_v_end);
  __pyx_t_1 = PyObject_Call(__pyx_builtin_ord, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyInt_AsChar(__pyx_t_1); if (unlikely((__pyx_t_6 == (char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_v_self->__pyx___oParser->readRange(__pyx_t_5, __pyx_t_6);
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("asciiParse.AsciiParseWrapper.readRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":157
 *             return self.__oParser.readIdentifier()
 * 
 *       cpdef bint readRange(self, begin, end):             # <<<<<<<<<<<<<<
 *             """
 * 	    Consume head byte if it is >= begin and <= end else return false
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_17readRange(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10asciiParse_17AsciiParseWrapper_17readRange[] = "\n\t    Consume head byte if it is >= begin and <= end else return false\n\t    Same as 'a'..'z' in BNF\n\t    ";
static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_17readRange(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_begin = 0;
  PyObject *__pyx_v_end = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__begin,&__pyx_n_s__end,0};
  __Pyx_RefNannySetupContext("readRange");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__begin);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__end);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("readRange", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "readRange") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_begin = values[0];
    __pyx_v_end = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readRange", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.readRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(((struct __pyx_vtabstruct_10asciiParse_AsciiParseWrapper *)((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx_vtab)->readRange(((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self), __pyx_v_begin, __pyx_v_end, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.readRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":164
 *             return self.__oParser.readRange(ord(begin), ord(end))
 * 
 *       cpdef bint readCString(self):             # <<<<<<<<<<<<<<
 *             """
 * 	    Read following BNF rule else return False
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_18readCString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_10asciiParse_17AsciiParseWrapper_readCString(struct __pyx_obj_10asciiParse_AsciiParseWrapper *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readCString");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__readCString); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_10asciiParse_17AsciiParseWrapper_18readCString)) {
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "asciiParse.pyx":169
 * 	    '"' -> ['/'| '"']
 * 	    """
 *             return self.__oParser.readCString()             # <<<<<<<<<<<<<<
 * 
 *       cpdef bint readCChar(self):
 */
  __pyx_r = __pyx_v_self->__pyx___oParser->readCString();
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("asciiParse.AsciiParseWrapper.readCString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":164
 *             return self.__oParser.readRange(ord(begin), ord(end))
 * 
 *       cpdef bint readCString(self):             # <<<<<<<<<<<<<<
 *             """
 * 	    Read following BNF rule else return False
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_18readCString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10asciiParse_17AsciiParseWrapper_18readCString[] = "\n\t    Read following BNF rule else return False\n\t    '\"' -> ['/'| '\"']\n\t    ";
static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_18readCString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readCString");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(((struct __pyx_vtabstruct_10asciiParse_AsciiParseWrapper *)((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx_vtab)->readCString(((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self), 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.readCString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":171
 *             return self.__oParser.readCString()
 * 
 *       cpdef bint readCChar(self):             # <<<<<<<<<<<<<<
 *             """
 * 	    Read following BNF rule else return False
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_19readCChar(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_10asciiParse_17AsciiParseWrapper_readCChar(struct __pyx_obj_10asciiParse_AsciiParseWrapper *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readCChar");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__readCChar); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_10asciiParse_17AsciiParseWrapper_19readCChar)) {
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "asciiParse.pyx":176
 * 	    "'" -> ["/"| "'"]
 * 	    """
 *             return self.__oParser.readCChar()             # <<<<<<<<<<<<<<
 * 
 *       cpdef bint  readAChar(self):
 */
  __pyx_r = __pyx_v_self->__pyx___oParser->readCChar();
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("asciiParse.AsciiParseWrapper.readCChar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":171
 *             return self.__oParser.readCString()
 * 
 *       cpdef bint readCChar(self):             # <<<<<<<<<<<<<<
 *             """
 * 	    Read following BNF rule else return False
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_19readCChar(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10asciiParse_17AsciiParseWrapper_19readCChar[] = "\n\t    Read following BNF rule else return False\n\t    \"'\" -> [\"/\"| \"'\"]\n\t    ";
static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_19readCChar(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readCChar");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(((struct __pyx_vtabstruct_10asciiParse_AsciiParseWrapper *)((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx_vtab)->readCChar(((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self), 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.readCChar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":178
 *             return self.__oParser.readCChar()
 * 
 *       cpdef bint  readAChar(self):             # <<<<<<<<<<<<<<
 *             """
 * 	    Consume a character if possible.
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_20readAChar(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_10asciiParse_17AsciiParseWrapper_readAChar(struct __pyx_obj_10asciiParse_AsciiParseWrapper *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readAChar");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__readAChar); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_10asciiParse_17AsciiParseWrapper_20readAChar)) {
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "asciiParse.pyx":182
 * 	    Consume a character if possible.
 * 	    """
 *             return self.__oParser.readAChar()             # <<<<<<<<<<<<<<
 * 
 *       def   incPos(self):
 */
  __pyx_r = __pyx_v_self->__pyx___oParser->readAChar();
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("asciiParse.AsciiParseWrapper.readAChar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":178
 *             return self.__oParser.readCChar()
 * 
 *       cpdef bint  readAChar(self):             # <<<<<<<<<<<<<<
 *             """
 * 	    Consume a character if possible.
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_20readAChar(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10asciiParse_17AsciiParseWrapper_20readAChar[] = "\n\t    Consume a character if possible.\n\t    ";
static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_20readAChar(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readAChar");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(((struct __pyx_vtabstruct_10asciiParse_AsciiParseWrapper *)((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx_vtab)->readAChar(((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self), 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.readAChar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":184
 *             return self.__oParser.readAChar()
 * 
 *       def   incPos(self):             # <<<<<<<<<<<<<<
 *             """
 * 	    Increment current index, column and line count.
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_21incPos(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10asciiParse_17AsciiParseWrapper_21incPos[] = "\n\t    Increment current index, column and line count.\n\t    Should not be used, or only when sure.\n\t    ";
static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_21incPos(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("incPos");

  /* "asciiParse.pyx":189
 * 	    Should not be used, or only when sure.
 * 	    """
 *             self.__oParser.incPos()             # <<<<<<<<<<<<<<
 * 
 *       def   notIgnore(self):
 */
  ((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx___oParser->incPos();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":191
 *             self.__oParser.incPos()
 * 
 *       def   notIgnore(self):             # <<<<<<<<<<<<<<
 *             """
 * 	    Stop ignoring characters from wsList.
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_22notIgnore(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10asciiParse_17AsciiParseWrapper_22notIgnore[] = "\n\t    Stop ignoring characters from wsList.\n\t    ";
static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_22notIgnore(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("notIgnore");

  /* "asciiParse.pyx":195
 * 	    Stop ignoring characters from wsList.
 * 	    """
 *             self.setWsList("")             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__setWsList); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_12), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "asciiParse.pyx":196
 * 	    """
 *             self.setWsList("")
 *             return True             # <<<<<<<<<<<<<<
 * 
 *       def   resetIgnore(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.notIgnore", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":198
 *             return True
 * 
 *       def   resetIgnore(self):             # <<<<<<<<<<<<<<
 *             """
 * 	    Reset ignored characters list.
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_23resetIgnore(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10asciiParse_17AsciiParseWrapper_23resetIgnore[] = "\n\t    Reset ignored characters list.\n\t    ";
static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_23resetIgnore(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("resetIgnore");

  /* "asciiParse.pyx":202
 * 	    Reset ignored characters list.
 * 	    """
 *             self.setWsList(" \r\n\t")             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__setWsList); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_13), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "asciiParse.pyx":203
 * 	    """
 *             self.setWsList(" \r\n\t")
 *             return True             # <<<<<<<<<<<<<<
 * 
 *       def   saveContext(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.resetIgnore", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":205
 *             return True
 * 
 *       def   saveContext(self):             # <<<<<<<<<<<<<<
 *             """
 * 	    Stack the current index position.
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_24saveContext(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10asciiParse_17AsciiParseWrapper_24saveContext[] = "\n\t    Stack the current index position.\n\t    ";
static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_24saveContext(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("saveContext");

  /* "asciiParse.pyx":209
 * 	    Stack the current index position.
 * 	    """
 *             self.__oParser.saveContext()             # <<<<<<<<<<<<<<
 * 
 *       def   restoreContext(self):
 */
  ((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx___oParser->saveContext();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":211
 *             self.__oParser.saveContext()
 * 
 *       def   restoreContext(self):             # <<<<<<<<<<<<<<
 *             """
 * 	    Pop the last index position.
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_25restoreContext(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10asciiParse_17AsciiParseWrapper_25restoreContext[] = "\n\t    Pop the last index position.\n\t    ";
static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_25restoreContext(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("restoreContext");

  /* "asciiParse.pyx":215
 * 	    Pop the last index position.
 * 	    """
 *             return self.__oParser.restoreContext()             # <<<<<<<<<<<<<<
 * 
 *       def   validContext(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx___oParser->restoreContext()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.restoreContext", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":217
 *             return self.__oParser.restoreContext()
 * 
 *       def   validContext(self):             # <<<<<<<<<<<<<<
 *             """
 * 	    Pop all useless contexts to keep one context only.
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_26validContext(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10asciiParse_17AsciiParseWrapper_26validContext[] = "\n\t    Pop all useless contexts to keep one context only.\n\t    ";
static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_26validContext(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("validContext");

  /* "asciiParse.pyx":221
 * 	    Pop all useless contexts to keep one context only.
 * 	    """
 *             return self.__oParser.validContext()             # <<<<<<<<<<<<<<
 * 
 *       def   parsedStream(self, char* newStream,\
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx___oParser->validContext()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.validContext", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":223
 *             return self.__oParser.validContext()
 * 
 *       def   parsedStream(self, char* newStream,\             # <<<<<<<<<<<<<<
 * 			       char* name = "<string>",\
 * 			       char* ignore = " \r\n\t"):
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_27parsedStream(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10asciiParse_17AsciiParseWrapper_27parsedStream[] = "\n\t    Push a new Stream into the parser.\n\t    All subsequent called functions will parse this new stream,\n\t    until the 'popStream' function is called.\n\t    ";
static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_27parsedStream(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_newStream;
  char *__pyx_v_name;
  char *__pyx_v_ignore;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__newStream,&__pyx_n_s__name,&__pyx_n_s__ignore,0};
  __Pyx_RefNannySetupContext("parsedStream");
  {
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__newStream);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ignore);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "parsedStream") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_newStream = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_newStream) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[1]) {
      __pyx_v_name = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_name = ((char *)__pyx_k_14);
    }
    if (values[2]) {
      __pyx_v_ignore = PyBytes_AsString(values[2]); if (unlikely((!__pyx_v_ignore) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_ignore = ((char *)__pyx_k_2);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("parsedStream", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.parsedStream", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "asciiParse.pyx":231
 * 	    until the 'popStream' function is called.
 * 	    """
 *             self.__lStream.append(newStream)             # <<<<<<<<<<<<<<
 *             self.__oParser.parsedStream(newStream, name, ignore)
 * 
 */
  __pyx_t_1 = PyBytes_FromString(__pyx_v_newStream); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = __Pyx_PyObject_Append(((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx___lStream, ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "asciiParse.pyx":232
 * 	    """
 *             self.__lStream.append(newStream)
 *             self.__oParser.parsedStream(newStream, name, ignore)             # <<<<<<<<<<<<<<
 * 
 *       def  popStream(self):
 */
  ((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx___oParser->parsedStream(__pyx_v_newStream, __pyx_v_name, __pyx_v_ignore);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.parsedStream", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":234
 *             self.__oParser.parsedStream(newStream, name, ignore)
 * 
 *       def  popStream(self):             # <<<<<<<<<<<<<<
 *            """
 * 	   Pop the last Stream pushed on to the parser stack.
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_28popStream(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10asciiParse_17AsciiParseWrapper_28popStream[] = "\n\t   Pop the last Stream pushed on to the parser stack.\n\t   ";
static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_28popStream(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("popStream");

  /* "asciiParse.pyx":238
 * 	   Pop the last Stream pushed on to the parser stack.
 * 	   """
 *            self.__lStream.pop()             # <<<<<<<<<<<<<<
 *            self.__oParser.popStream()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Pop(((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx___lStream); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "asciiParse.pyx":239
 * 	   """
 *            self.__lStream.pop()
 *            self.__oParser.popStream()             # <<<<<<<<<<<<<<
 * 
 *       def  getStream(self):
 */
  ((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx___oParser->popStream();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.popStream", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":241
 *            self.__oParser.popStream()
 * 
 *       def  getStream(self):             # <<<<<<<<<<<<<<
 *            """
 * 	   Return the current analysed Stream.
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_29getStream(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10asciiParse_17AsciiParseWrapper_29getStream[] = "\n\t   Return the current analysed Stream.\n\t   ";
static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_29getStream(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getStream");

  /* "asciiParse.pyx":245
 * 	   Return the current analysed Stream.
 * 	   """
 *            return self.__lStream[-1]             # <<<<<<<<<<<<<<
 * 
 *       def  getStreamLen(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetItemInt(((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx___lStream, -1, sizeof(long), PyInt_FromLong); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.getStream", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":247
 *            return self.__lStream[-1]
 * 
 *       def  getStreamLen(self):             # <<<<<<<<<<<<<<
 *            """
 * 	   Return the len of the current stream.
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_30getStreamLen(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10asciiParse_17AsciiParseWrapper_30getStreamLen[] = "\n\t   Return the len of the current stream.\n\t   ";
static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_30getStreamLen(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getStreamLen");

  /* "asciiParse.pyx":251
 * 	   Return the len of the current stream.
 * 	   """
 *            return self.__oParser.getStreamLen()             # <<<<<<<<<<<<<<
 * 
 *       def  printStream(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx___oParser->getStreamLen()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.getStreamLen", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":253
 *            return self.__oParser.getStreamLen()
 * 
 *       def  printStream(self):             # <<<<<<<<<<<<<<
 *            """
 * 	   Print current real stream contained in the wrapped c++.
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_31printStream(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10asciiParse_17AsciiParseWrapper_31printStream[] = "\n\t   Print current real stream contained in the wrapped c++.\n\t   ";
static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_31printStream(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("printStream");

  /* "asciiParse.pyx":257
 * 	   Print current real stream contained in the wrapped c++.
 * 	   """
 *            self.__oParser.printStream()             # <<<<<<<<<<<<<<
 * 
 *       def  setWsList(self, char* newWsList):
 */
  ((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx___oParser->printStream();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":259
 *            self.__oParser.printStream()
 * 
 *       def  setWsList(self, char* newWsList):             # <<<<<<<<<<<<<<
 *            """
 * 	   Set the list of caracter ignored by the parser.
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_32setWsList(PyObject *__pyx_v_self, PyObject *__pyx_arg_newWsList); /*proto*/
static char __pyx_doc_10asciiParse_17AsciiParseWrapper_32setWsList[] = "\n\t   Set the list of caracter ignored by the parser.\n\t   ";
static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_32setWsList(PyObject *__pyx_v_self, PyObject *__pyx_arg_newWsList) {
  char *__pyx_v_newWsList;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setWsList");
  assert(__pyx_arg_newWsList); {
    __pyx_v_newWsList = PyBytes_AsString(__pyx_arg_newWsList); if (unlikely((!__pyx_v_newWsList) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.setWsList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "asciiParse.pyx":263
 * 	   Set the list of caracter ignored by the parser.
 * 	   """
 *            self.__oParser.setWsList(newWsList)             # <<<<<<<<<<<<<<
 * 
 *       def  getWsList(self):
 */
  ((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx___oParser->setWsList(__pyx_v_newWsList);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":265
 *            self.__oParser.setWsList(newWsList)
 * 
 *       def  getWsList(self):             # <<<<<<<<<<<<<<
 *            """
 * 	   Return the list of characters ignored by the parser
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_33getWsList(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10asciiParse_17AsciiParseWrapper_33getWsList[] = "\n\t   Return the list of characters ignored by the parser\n\t   ";
static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_33getWsList(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getWsList");

  /* "asciiParse.pyx":269
 * 	   Return the list of characters ignored by the parser
 * 	   """
 *            return self.__oParser.getWsList()             # <<<<<<<<<<<<<<
 * 
 *       cpdef int getColumnNbr(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyBytes_FromString(((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx___oParser->getWsList()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.getWsList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":271
 *            return self.__oParser.getWsList()
 * 
 *       cpdef int getColumnNbr(self):             # <<<<<<<<<<<<<<
 *             """
 * 	    Return the number of column that was parsed.
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_34getColumnNbr(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_10asciiParse_17AsciiParseWrapper_getColumnNbr(struct __pyx_obj_10asciiParse_AsciiParseWrapper *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getColumnNbr");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__getColumnNbr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_10asciiParse_17AsciiParseWrapper_34getColumnNbr)) {
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "asciiParse.pyx":275
 * 	    Return the number of column that was parsed.
 * 	    """
 *             return self.__oParser.getColumnNbr()             # <<<<<<<<<<<<<<
 * 
 *       cpdef int getLineNbr(self):
 */
  __pyx_r = __pyx_v_self->__pyx___oParser->getColumnNbr();
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("asciiParse.AsciiParseWrapper.getColumnNbr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":271
 *            return self.__oParser.getWsList()
 * 
 *       cpdef int getColumnNbr(self):             # <<<<<<<<<<<<<<
 *             """
 * 	    Return the number of column that was parsed.
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_34getColumnNbr(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10asciiParse_17AsciiParseWrapper_34getColumnNbr[] = "\n\t    Return the number of column that was parsed.\n\t    ";
static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_34getColumnNbr(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getColumnNbr");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_vtabstruct_10asciiParse_AsciiParseWrapper *)((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx_vtab)->getColumnNbr(((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self), 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.getColumnNbr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":277
 *             return self.__oParser.getColumnNbr()
 * 
 *       cpdef int getLineNbr(self):             # <<<<<<<<<<<<<<
 *             """
 * 	    Return the number of line that was parsed.
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_35getLineNbr(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_10asciiParse_17AsciiParseWrapper_getLineNbr(struct __pyx_obj_10asciiParse_AsciiParseWrapper *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getLineNbr");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__getLineNbr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_10asciiParse_17AsciiParseWrapper_35getLineNbr)) {
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "asciiParse.pyx":281
 * 	    Return the number of line that was parsed.
 * 	    """
 *             return self.__oParser.getLineNbr()             # <<<<<<<<<<<<<<
 * 
 *       cpdef int getIndex(self):
 */
  __pyx_r = __pyx_v_self->__pyx___oParser->getLineNbr();
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("asciiParse.AsciiParseWrapper.getLineNbr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":277
 *             return self.__oParser.getColumnNbr()
 * 
 *       cpdef int getLineNbr(self):             # <<<<<<<<<<<<<<
 *             """
 * 	    Return the number of line that was parsed.
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_35getLineNbr(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10asciiParse_17AsciiParseWrapper_35getLineNbr[] = "\n\t    Return the number of line that was parsed.\n\t    ";
static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_35getLineNbr(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getLineNbr");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_vtabstruct_10asciiParse_AsciiParseWrapper *)((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx_vtab)->getLineNbr(((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self), 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.getLineNbr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":283
 *             return self.__oParser.getLineNbr()
 * 
 *       cpdef int getIndex(self):             # <<<<<<<<<<<<<<
 *             """
 * 	    Return the index value.
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_36getIndex(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_10asciiParse_17AsciiParseWrapper_getIndex(struct __pyx_obj_10asciiParse_AsciiParseWrapper *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getIndex");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__getIndex); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_10asciiParse_17AsciiParseWrapper_36getIndex)) {
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "asciiParse.pyx":288
 * 	    This value is used by the parser to point current byte.
 * 	    """
 *             return self.__oParser.getIndex()             # <<<<<<<<<<<<<<
 * 
 *       cpdef char getCurrentByte(self):
 */
  __pyx_r = __pyx_v_self->__pyx___oParser->getIndex();
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("asciiParse.AsciiParseWrapper.getIndex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":283
 *             return self.__oParser.getLineNbr()
 * 
 *       cpdef int getIndex(self):             # <<<<<<<<<<<<<<
 *             """
 * 	    Return the index value.
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_36getIndex(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10asciiParse_17AsciiParseWrapper_36getIndex[] = "\n\t    Return the index value.\n\t    This value is used by the parser to point current byte.\n\t    ";
static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_36getIndex(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getIndex");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_vtabstruct_10asciiParse_AsciiParseWrapper *)((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx_vtab)->getIndex(((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self), 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.getIndex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":290
 *             return self.__oParser.getIndex()
 * 
 *       cpdef char getCurrentByte(self):             # <<<<<<<<<<<<<<
 *             """
 * 	    Return the current pointed byte.
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_37getCurrentByte(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_f_10asciiParse_17AsciiParseWrapper_getCurrentByte(struct __pyx_obj_10asciiParse_AsciiParseWrapper *__pyx_v_self, int __pyx_skip_dispatch) {
  char __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  char __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getCurrentByte");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__getCurrentByte); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_10asciiParse_17AsciiParseWrapper_37getCurrentByte)) {
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_AsChar(__pyx_t_2); if (unlikely((__pyx_t_3 == (char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "asciiParse.pyx":294
 * 	    Return the current pointed byte.
 * 	    """
 *             return self.__oParser.getCurrentByte()             # <<<<<<<<<<<<<<
 * 
 *       cpdef getName(self):
 */
  __pyx_r = __pyx_v_self->__pyx___oParser->getCurrentByte();
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("asciiParse.AsciiParseWrapper.getCurrentByte", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":290
 *             return self.__oParser.getIndex()
 * 
 *       cpdef char getCurrentByte(self):             # <<<<<<<<<<<<<<
 *             """
 * 	    Return the current pointed byte.
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_37getCurrentByte(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10asciiParse_17AsciiParseWrapper_37getCurrentByte[] = "\n\t    Return the current pointed byte.\n\t    ";
static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_37getCurrentByte(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getCurrentByte");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_vtabstruct_10asciiParse_AsciiParseWrapper *)((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx_vtab)->getCurrentByte(((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self), 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.getCurrentByte", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":296
 *             return self.__oParser.getCurrentByte()
 * 
 *       cpdef getName(self):             # <<<<<<<<<<<<<<
 *             """
 * 	    Return the name gived to the current Stream.
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_38getName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_10asciiParse_17AsciiParseWrapper_getName(struct __pyx_obj_10asciiParse_AsciiParseWrapper *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getName");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__getName); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_10asciiParse_17AsciiParseWrapper_38getName)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "asciiParse.pyx":300
 * 	    Return the name gived to the current Stream.
 * 	    """
 *             return self.__oParser.getName()             # <<<<<<<<<<<<<<
 * 
 *       cpdef setTag(self, char* tagName):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyBytes_FromString(__pyx_v_self->__pyx___oParser->getName()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.getName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":296
 *             return self.__oParser.getCurrentByte()
 * 
 *       cpdef getName(self):             # <<<<<<<<<<<<<<
 *             """
 * 	    Return the name gived to the current Stream.
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_38getName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10asciiParse_17AsciiParseWrapper_38getName[] = "\n\t    Return the name gived to the current Stream.\n\t    ";
static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_38getName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getName");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_10asciiParse_AsciiParseWrapper *)((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx_vtab)->getName(((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self), 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.getName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":302
 *             return self.__oParser.getName()
 * 
 *       cpdef setTag(self, char* tagName):             # <<<<<<<<<<<<<<
 *             """
 * 	    Save the current index under the given name.
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_39setTag(PyObject *__pyx_v_self, PyObject *__pyx_arg_tagName); /*proto*/
static PyObject *__pyx_f_10asciiParse_17AsciiParseWrapper_setTag(struct __pyx_obj_10asciiParse_AsciiParseWrapper *__pyx_v_self, char *__pyx_v_tagName, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setTag");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__setTag); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_10asciiParse_17AsciiParseWrapper_39setTag)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyBytes_FromString(__pyx_v_tagName); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_2));
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_t_2));
      __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
      __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "asciiParse.pyx":306
 * 	    Save the current index under the given name.
 * 	    """
 *             self.__dTag[tagName] = self.getIndex()             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_vtabstruct_10asciiParse_AsciiParseWrapper *)__pyx_v_self->__pyx_vtab)->getIndex(__pyx_v_self, 0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyBytes_FromString(__pyx_v_tagName); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  if (PyObject_SetItem(__pyx_v_self->__pyx___dTag, ((PyObject *)__pyx_t_2), __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "asciiParse.pyx":307
 * 	    """
 *             self.__dTag[tagName] = self.getIndex()
 *             return True             # <<<<<<<<<<<<<<
 * 
 *       cpdef object	getTag(self, char* tagName):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.setTag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":302
 *             return self.__oParser.getName()
 * 
 *       cpdef setTag(self, char* tagName):             # <<<<<<<<<<<<<<
 *             """
 * 	    Save the current index under the given name.
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_39setTag(PyObject *__pyx_v_self, PyObject *__pyx_arg_tagName); /*proto*/
static char __pyx_doc_10asciiParse_17AsciiParseWrapper_39setTag[] = "\n\t    Save the current index under the given name.\n\t    ";
static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_39setTag(PyObject *__pyx_v_self, PyObject *__pyx_arg_tagName) {
  char *__pyx_v_tagName;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setTag");
  assert(__pyx_arg_tagName); {
    __pyx_v_tagName = PyBytes_AsString(__pyx_arg_tagName); if (unlikely((!__pyx_v_tagName) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.setTag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_10asciiParse_AsciiParseWrapper *)((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx_vtab)->setTag(((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self), __pyx_v_tagName, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.setTag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":309
 *             return True
 * 
 *       cpdef object	getTag(self, char* tagName):             # <<<<<<<<<<<<<<
 *             """
 * 	    Extract the string between the saved index value
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_40getTag(PyObject *__pyx_v_self, PyObject *__pyx_arg_tagName); /*proto*/
static PyObject *__pyx_f_10asciiParse_17AsciiParseWrapper_getTag(struct __pyx_obj_10asciiParse_AsciiParseWrapper *__pyx_v_self, char *__pyx_v_tagName, int __pyx_skip_dispatch) {
  int __pyx_v_origin;
  const char* __pyx_v_stream;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getTag");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__getTag); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_10asciiParse_17AsciiParseWrapper_40getTag)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyBytes_FromString(__pyx_v_tagName); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_2));
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_t_2));
      __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
      __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "asciiParse.pyx":314
 * 	    and the current one.
 * 	    """
 *             cdef int origin = self.__dTag[tagName]             # <<<<<<<<<<<<<<
 *             cdef ccptr stream = &(self.__oParser.getStream()[origin])
 *             if self.getIndex() <= origin:
 */
  __pyx_t_1 = PyBytes_FromString(__pyx_v_tagName); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = PyObject_GetItem(__pyx_v_self->__pyx___dTag, ((PyObject *)__pyx_t_1)); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyInt_AsInt(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_origin = __pyx_t_4;

  /* "asciiParse.pyx":315
 * 	    """
 *             cdef int origin = self.__dTag[tagName]
 *             cdef ccptr stream = &(self.__oParser.getStream()[origin])             # <<<<<<<<<<<<<<
 *             if self.getIndex() <= origin:
 *               return PyString_FromStringAndSize("", 0)
 */
  __pyx_v_stream = (&(__pyx_v_self->__pyx___oParser->getStream()[__pyx_v_origin]));

  /* "asciiParse.pyx":316
 *             cdef int origin = self.__dTag[tagName]
 *             cdef ccptr stream = &(self.__oParser.getStream()[origin])
 *             if self.getIndex() <= origin:             # <<<<<<<<<<<<<<
 *               return PyString_FromStringAndSize("", 0)
 *             return PyString_FromStringAndSize(stream, self.getIndex() - origin)
 */
  __pyx_t_5 = (((struct __pyx_vtabstruct_10asciiParse_AsciiParseWrapper *)__pyx_v_self->__pyx_vtab)->getIndex(__pyx_v_self, 0) <= __pyx_v_origin);
  if (__pyx_t_5) {

    /* "asciiParse.pyx":317
 *             cdef ccptr stream = &(self.__oParser.getStream()[origin])
 *             if self.getIndex() <= origin:
 *               return PyString_FromStringAndSize("", 0)             # <<<<<<<<<<<<<<
 *             return PyString_FromStringAndSize(stream, self.getIndex() - origin)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyString_FromStringAndSize(__pyx_k_1, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "asciiParse.pyx":318
 *             if self.getIndex() <= origin:
 *               return PyString_FromStringAndSize("", 0)
 *             return PyString_FromStringAndSize(stream, self.getIndex() - origin)             # <<<<<<<<<<<<<<
 * 
 *       cpdef object	getCTag(self, char* tagName):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyString_FromStringAndSize(__pyx_v_stream, (((struct __pyx_vtabstruct_10asciiParse_AsciiParseWrapper *)__pyx_v_self->__pyx_vtab)->getIndex(__pyx_v_self, 0) - __pyx_v_origin)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.getTag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":309
 *             return True
 * 
 *       cpdef object	getTag(self, char* tagName):             # <<<<<<<<<<<<<<
 *             """
 * 	    Extract the string between the saved index value
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_40getTag(PyObject *__pyx_v_self, PyObject *__pyx_arg_tagName); /*proto*/
static char __pyx_doc_10asciiParse_17AsciiParseWrapper_40getTag[] = "\n\t    Extract the string between the saved index value\n\t    and the current one.\n\t    ";
static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_40getTag(PyObject *__pyx_v_self, PyObject *__pyx_arg_tagName) {
  char *__pyx_v_tagName;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getTag");
  assert(__pyx_arg_tagName); {
    __pyx_v_tagName = PyBytes_AsString(__pyx_arg_tagName); if (unlikely((!__pyx_v_tagName) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.getTag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_10asciiParse_AsciiParseWrapper *)((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx_vtab)->getTag(((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self), __pyx_v_tagName, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.getTag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":320
 *             return PyString_FromStringAndSize(stream, self.getIndex() - origin)
 * 
 *       cpdef object	getCTag(self, char* tagName):             # <<<<<<<<<<<<<<
 *             """
 * 	    Same as getTag but it suppress the last caracter:
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_41getCTag(PyObject *__pyx_v_self, PyObject *__pyx_arg_tagName); /*proto*/
static PyObject *__pyx_f_10asciiParse_17AsciiParseWrapper_getCTag(struct __pyx_obj_10asciiParse_AsciiParseWrapper *__pyx_v_self, char *__pyx_v_tagName, int __pyx_skip_dispatch) {
  int __pyx_v_origin;
  const char* __pyx_v_stream;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getCTag");
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__getCTag); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_10asciiParse_17AsciiParseWrapper_41getCTag)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyBytes_FromString(__pyx_v_tagName); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_2));
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_t_2));
      __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
      __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "asciiParse.pyx":325
 * 	    usefull in the cas of a C String or Char.
 * 	    """
 *             cdef int origin = self.__dTag[tagName]             # <<<<<<<<<<<<<<
 *             cdef ccptr stream = &(self.__oParser.getStream()[origin])
 *             return PyString_FromStringAndSize(stream,\
 */
  __pyx_t_1 = PyBytes_FromString(__pyx_v_tagName); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = PyObject_GetItem(__pyx_v_self->__pyx___dTag, ((PyObject *)__pyx_t_1)); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyInt_AsInt(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_origin = __pyx_t_4;

  /* "asciiParse.pyx":326
 * 	    """
 *             cdef int origin = self.__dTag[tagName]
 *             cdef ccptr stream = &(self.__oParser.getStream()[origin])             # <<<<<<<<<<<<<<
 *             return PyString_FromStringAndSize(stream,\
 * 		(self.getIndex() - origin) - 1)
 */
  __pyx_v_stream = (&(__pyx_v_self->__pyx___oParser->getStream()[__pyx_v_origin]));

  /* "asciiParse.pyx":327
 *             cdef int origin = self.__dTag[tagName]
 *             cdef ccptr stream = &(self.__oParser.getStream()[origin])
 *             return PyString_FromStringAndSize(stream,\             # <<<<<<<<<<<<<<
 * 		(self.getIndex() - origin) - 1)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "asciiParse.pyx":328
 *             cdef ccptr stream = &(self.__oParser.getStream()[origin])
 *             return PyString_FromStringAndSize(stream,\
 * 		(self.getIndex() - origin) - 1)             # <<<<<<<<<<<<<<
 */
  __pyx_t_2 = PyString_FromStringAndSize(__pyx_v_stream, ((((struct __pyx_vtabstruct_10asciiParse_AsciiParseWrapper *)__pyx_v_self->__pyx_vtab)->getIndex(__pyx_v_self, 0) - __pyx_v_origin) - 1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.getCTag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "asciiParse.pyx":320
 *             return PyString_FromStringAndSize(stream, self.getIndex() - origin)
 * 
 *       cpdef object	getCTag(self, char* tagName):             # <<<<<<<<<<<<<<
 *             """
 * 	    Same as getTag but it suppress the last caracter:
 */

static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_41getCTag(PyObject *__pyx_v_self, PyObject *__pyx_arg_tagName); /*proto*/
static char __pyx_doc_10asciiParse_17AsciiParseWrapper_41getCTag[] = "\n\t    Same as getTag but it suppress the last caracter:\n\t    usefull in the cas of a C String or Char.\n\t    ";
static PyObject *__pyx_pf_10asciiParse_17AsciiParseWrapper_41getCTag(PyObject *__pyx_v_self, PyObject *__pyx_arg_tagName) {
  char *__pyx_v_tagName;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getCTag");
  assert(__pyx_arg_tagName); {
    __pyx_v_tagName = PyBytes_AsString(__pyx_arg_tagName); if (unlikely((!__pyx_v_tagName) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.getCTag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_10asciiParse_AsciiParseWrapper *)((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self)->__pyx_vtab)->getCTag(((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)__pyx_v_self), __pyx_v_tagName, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("asciiParse.AsciiParseWrapper.getCTag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_10asciiParse_AsciiParseWrapper __pyx_vtable_10asciiParse_AsciiParseWrapper;

static PyObject *__pyx_tp_new_10asciiParse_AsciiParseWrapper(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10asciiParse_AsciiParseWrapper *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_10asciiParse_AsciiParseWrapper *)o);
  p->__pyx_vtab = __pyx_vtabptr_10asciiParse_AsciiParseWrapper;
  p->__pyx___dTag = Py_None; Py_INCREF(Py_None);
  p->__pyx___lStream = Py_None; Py_INCREF(Py_None);
  p->__pyx___oRoot = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_10asciiParse_AsciiParseWrapper(PyObject *o) {
  struct __pyx_obj_10asciiParse_AsciiParseWrapper *p = (struct __pyx_obj_10asciiParse_AsciiParseWrapper *)o;
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_10asciiParse_17AsciiParseWrapper_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_XDECREF(p->__pyx___dTag);
  Py_XDECREF(p->__pyx___lStream);
  Py_XDECREF(p->__pyx___oRoot);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_10asciiParse_AsciiParseWrapper(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10asciiParse_AsciiParseWrapper *p = (struct __pyx_obj_10asciiParse_AsciiParseWrapper *)o;
  if (p->__pyx___dTag) {
    e = (*v)(p->__pyx___dTag, a); if (e) return e;
  }
  if (p->__pyx___lStream) {
    e = (*v)(p->__pyx___lStream, a); if (e) return e;
  }
  if (p->__pyx___oRoot) {
    e = (*v)(p->__pyx___oRoot, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10asciiParse_AsciiParseWrapper(PyObject *o) {
  struct __pyx_obj_10asciiParse_AsciiParseWrapper *p = (struct __pyx_obj_10asciiParse_AsciiParseWrapper *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->__pyx___dTag);
  p->__pyx___dTag = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx___lStream);
  p->__pyx___lStream = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx___oRoot);
  p->__pyx___oRoot = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_10asciiParse_AsciiParseWrapper[] = {
  {__Pyx_NAMESTR("root"), (PyCFunction)__pyx_pf_10asciiParse_17AsciiParseWrapper_2root, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("setRoot"), (PyCFunction)__pyx_pf_10asciiParse_17AsciiParseWrapper_3setRoot, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("readComment"), (PyCFunction)__pyx_pf_10asciiParse_17AsciiParseWrapper_4readComment, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_10asciiParse_17AsciiParseWrapper_4readComment)},
  {__Pyx_NAMESTR("readIgnored"), (PyCFunction)__pyx_pf_10asciiParse_17AsciiParseWrapper_5readIgnored, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_10asciiParse_17AsciiParseWrapper_5readIgnored)},
  {__Pyx_NAMESTR("readWs"), (PyCFunction)__pyx_pf_10asciiParse_17AsciiParseWrapper_6readWs, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_10asciiParse_17AsciiParseWrapper_6readWs)},
  {__Pyx_NAMESTR("lastRead"), (PyCFunction)__pyx_pf_10asciiParse_17AsciiParseWrapper_7lastRead, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_10asciiParse_17AsciiParseWrapper_7lastRead)},
  {__Pyx_NAMESTR("peekChar"), (PyCFunction)__pyx_pf_10asciiParse_17AsciiParseWrapper_8peekChar, METH_O, __Pyx_DOCSTR(__pyx_doc_10asciiParse_17AsciiParseWrapper_8peekChar)},
  {__Pyx_NAMESTR("readChar"), (PyCFunction)__pyx_pf_10asciiParse_17AsciiParseWrapper_9readChar, METH_O, __Pyx_DOCSTR(__pyx_doc_10asciiParse_17AsciiParseWrapper_9readChar)},
  {__Pyx_NAMESTR("readEOF"), (PyCFunction)__pyx_pf_10asciiParse_17AsciiParseWrapper_10readEOF, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_10asciiParse_17AsciiParseWrapper_10readEOF)},
  {__Pyx_NAMESTR("readUntil"), (PyCFunction)__pyx_pf_10asciiParse_17AsciiParseWrapper_11readUntil, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_10asciiParse_17AsciiParseWrapper_11readUntil)},
  {__Pyx_NAMESTR("readUntilEOF"), (PyCFunction)__pyx_pf_10asciiParse_17AsciiParseWrapper_12readUntilEOF, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_10asciiParse_17AsciiParseWrapper_12readUntilEOF)},
  {__Pyx_NAMESTR("peekText"), (PyCFunction)__pyx_pf_10asciiParse_17AsciiParseWrapper_13peekText, METH_O, __Pyx_DOCSTR(__pyx_doc_10asciiParse_17AsciiParseWrapper_13peekText)},
  {__Pyx_NAMESTR("readText"), (PyCFunction)__pyx_pf_10asciiParse_17AsciiParseWrapper_14readText, METH_O, __Pyx_DOCSTR(__pyx_doc_10asciiParse_17AsciiParseWrapper_14readText)},
  {__Pyx_NAMESTR("readInteger"), (PyCFunction)__pyx_pf_10asciiParse_17AsciiParseWrapper_15readInteger, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_10asciiParse_17AsciiParseWrapper_15readInteger)},
  {__Pyx_NAMESTR("readIdentifier"), (PyCFunction)__pyx_pf_10asciiParse_17AsciiParseWrapper_16readIdentifier, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_10asciiParse_17AsciiParseWrapper_16readIdentifier)},
  {__Pyx_NAMESTR("readRange"), (PyCFunction)__pyx_pf_10asciiParse_17AsciiParseWrapper_17readRange, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_10asciiParse_17AsciiParseWrapper_17readRange)},
  {__Pyx_NAMESTR("readCString"), (PyCFunction)__pyx_pf_10asciiParse_17AsciiParseWrapper_18readCString, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_10asciiParse_17AsciiParseWrapper_18readCString)},
  {__Pyx_NAMESTR("readCChar"), (PyCFunction)__pyx_pf_10asciiParse_17AsciiParseWrapper_19readCChar, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_10asciiParse_17AsciiParseWrapper_19readCChar)},
  {__Pyx_NAMESTR("readAChar"), (PyCFunction)__pyx_pf_10asciiParse_17AsciiParseWrapper_20readAChar, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_10asciiParse_17AsciiParseWrapper_20readAChar)},
  {__Pyx_NAMESTR("incPos"), (PyCFunction)__pyx_pf_10asciiParse_17AsciiParseWrapper_21incPos, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_10asciiParse_17AsciiParseWrapper_21incPos)},
  {__Pyx_NAMESTR("notIgnore"), (PyCFunction)__pyx_pf_10asciiParse_17AsciiParseWrapper_22notIgnore, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_10asciiParse_17AsciiParseWrapper_22notIgnore)},
  {__Pyx_NAMESTR("resetIgnore"), (PyCFunction)__pyx_pf_10asciiParse_17AsciiParseWrapper_23resetIgnore, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_10asciiParse_17AsciiParseWrapper_23resetIgnore)},
  {__Pyx_NAMESTR("saveContext"), (PyCFunction)__pyx_pf_10asciiParse_17AsciiParseWrapper_24saveContext, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_10asciiParse_17AsciiParseWrapper_24saveContext)},
  {__Pyx_NAMESTR("restoreContext"), (PyCFunction)__pyx_pf_10asciiParse_17AsciiParseWrapper_25restoreContext, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_10asciiParse_17AsciiParseWrapper_25restoreContext)},
  {__Pyx_NAMESTR("validContext"), (PyCFunction)__pyx_pf_10asciiParse_17AsciiParseWrapper_26validContext, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_10asciiParse_17AsciiParseWrapper_26validContext)},
  {__Pyx_NAMESTR("parsedStream"), (PyCFunction)__pyx_pf_10asciiParse_17AsciiParseWrapper_27parsedStream, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_10asciiParse_17AsciiParseWrapper_27parsedStream)},
  {__Pyx_NAMESTR("popStream"), (PyCFunction)__pyx_pf_10asciiParse_17AsciiParseWrapper_28popStream, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_10asciiParse_17AsciiParseWrapper_28popStream)},
  {__Pyx_NAMESTR("getStream"), (PyCFunction)__pyx_pf_10asciiParse_17AsciiParseWrapper_29getStream, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_10asciiParse_17AsciiParseWrapper_29getStream)},
  {__Pyx_NAMESTR("getStreamLen"), (PyCFunction)__pyx_pf_10asciiParse_17AsciiParseWrapper_30getStreamLen, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_10asciiParse_17AsciiParseWrapper_30getStreamLen)},
  {__Pyx_NAMESTR("printStream"), (PyCFunction)__pyx_pf_10asciiParse_17AsciiParseWrapper_31printStream, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_10asciiParse_17AsciiParseWrapper_31printStream)},
  {__Pyx_NAMESTR("setWsList"), (PyCFunction)__pyx_pf_10asciiParse_17AsciiParseWrapper_32setWsList, METH_O, __Pyx_DOCSTR(__pyx_doc_10asciiParse_17AsciiParseWrapper_32setWsList)},
  {__Pyx_NAMESTR("getWsList"), (PyCFunction)__pyx_pf_10asciiParse_17AsciiParseWrapper_33getWsList, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_10asciiParse_17AsciiParseWrapper_33getWsList)},
  {__Pyx_NAMESTR("getColumnNbr"), (PyCFunction)__pyx_pf_10asciiParse_17AsciiParseWrapper_34getColumnNbr, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_10asciiParse_17AsciiParseWrapper_34getColumnNbr)},
  {__Pyx_NAMESTR("getLineNbr"), (PyCFunction)__pyx_pf_10asciiParse_17AsciiParseWrapper_35getLineNbr, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_10asciiParse_17AsciiParseWrapper_35getLineNbr)},
  {__Pyx_NAMESTR("getIndex"), (PyCFunction)__pyx_pf_10asciiParse_17AsciiParseWrapper_36getIndex, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_10asciiParse_17AsciiParseWrapper_36getIndex)},
  {__Pyx_NAMESTR("getCurrentByte"), (PyCFunction)__pyx_pf_10asciiParse_17AsciiParseWrapper_37getCurrentByte, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_10asciiParse_17AsciiParseWrapper_37getCurrentByte)},
  {__Pyx_NAMESTR("getName"), (PyCFunction)__pyx_pf_10asciiParse_17AsciiParseWrapper_38getName, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_10asciiParse_17AsciiParseWrapper_38getName)},
  {__Pyx_NAMESTR("setTag"), (PyCFunction)__pyx_pf_10asciiParse_17AsciiParseWrapper_39setTag, METH_O, __Pyx_DOCSTR(__pyx_doc_10asciiParse_17AsciiParseWrapper_39setTag)},
  {__Pyx_NAMESTR("getTag"), (PyCFunction)__pyx_pf_10asciiParse_17AsciiParseWrapper_40getTag, METH_O, __Pyx_DOCSTR(__pyx_doc_10asciiParse_17AsciiParseWrapper_40getTag)},
  {__Pyx_NAMESTR("getCTag"), (PyCFunction)__pyx_pf_10asciiParse_17AsciiParseWrapper_41getCTag, METH_O, __Pyx_DOCSTR(__pyx_doc_10asciiParse_17AsciiParseWrapper_41getCTag)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_AsciiParseWrapper = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_AsciiParseWrapper = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_AsciiParseWrapper = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_AsciiParseWrapper = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_10asciiParse_AsciiParseWrapper = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("asciiParse.AsciiParseWrapper"), /*tp_name*/
  sizeof(struct __pyx_obj_10asciiParse_AsciiParseWrapper), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10asciiParse_AsciiParseWrapper, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_AsciiParseWrapper, /*tp_as_number*/
  &__pyx_tp_as_sequence_AsciiParseWrapper, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_AsciiParseWrapper, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_AsciiParseWrapper, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n      A parsing primitive library.\n      "), /*tp_doc*/
  __pyx_tp_traverse_10asciiParse_AsciiParseWrapper, /*tp_traverse*/
  __pyx_tp_clear_10asciiParse_AsciiParseWrapper, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10asciiParse_AsciiParseWrapper, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_10asciiParse_17AsciiParseWrapper___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10asciiParse_AsciiParseWrapper, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    __Pyx_NAMESTR("asciiParse"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 0},
  {&__pyx_kp_s_11, __pyx_k_11, sizeof(__pyx_k_11), 0, 0, 1, 0},
  {&__pyx_kp_s_2, __pyx_k_2, sizeof(__pyx_k_2), 0, 0, 1, 0},
  {&__pyx_kp_s_6, __pyx_k_6, sizeof(__pyx_k_6), 0, 0, 1, 0},
  {&__pyx_kp_s_7, __pyx_k_7, sizeof(__pyx_k_7), 0, 0, 1, 0},
  {&__pyx_kp_s_9, __pyx_k_9, sizeof(__pyx_k_9), 0, 0, 1, 0},
  {&__pyx_n_s__TypeError, __pyx_k__TypeError, sizeof(__pyx_k__TypeError), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s__begin, __pyx_k__begin, sizeof(__pyx_k__begin), 0, 0, 1, 1},
  {&__pyx_n_s__c, __pyx_k__c, sizeof(__pyx_k__c), 0, 0, 1, 1},
  {&__pyx_n_s__delimitor, __pyx_k__delimitor, sizeof(__pyx_k__delimitor), 0, 0, 1, 1},
  {&__pyx_n_s__end, __pyx_k__end, sizeof(__pyx_k__end), 0, 0, 1, 1},
  {&__pyx_n_s__exit, __pyx_k__exit, sizeof(__pyx_k__exit), 0, 0, 1, 1},
  {&__pyx_n_s__getCTag, __pyx_k__getCTag, sizeof(__pyx_k__getCTag), 0, 0, 1, 1},
  {&__pyx_n_s__getColumnNbr, __pyx_k__getColumnNbr, sizeof(__pyx_k__getColumnNbr), 0, 0, 1, 1},
  {&__pyx_n_s__getCurrentByte, __pyx_k__getCurrentByte, sizeof(__pyx_k__getCurrentByte), 0, 0, 1, 1},
  {&__pyx_n_s__getIndex, __pyx_k__getIndex, sizeof(__pyx_k__getIndex), 0, 0, 1, 1},
  {&__pyx_n_s__getLineNbr, __pyx_k__getLineNbr, sizeof(__pyx_k__getLineNbr), 0, 0, 1, 1},
  {&__pyx_n_s__getName, __pyx_k__getName, sizeof(__pyx_k__getName), 0, 0, 1, 1},
  {&__pyx_n_s__getTag, __pyx_k__getTag, sizeof(__pyx_k__getTag), 0, 0, 1, 1},
  {&__pyx_n_s__ignore, __pyx_k__ignore, sizeof(__pyx_k__ignore), 0, 0, 1, 1},
  {&__pyx_n_s__name, __pyx_k__name, sizeof(__pyx_k__name), 0, 0, 1, 1},
  {&__pyx_n_s__newStream, __pyx_k__newStream, sizeof(__pyx_k__newStream), 0, 0, 1, 1},
  {&__pyx_n_s__ord, __pyx_k__ord, sizeof(__pyx_k__ord), 0, 0, 1, 1},
  {&__pyx_n_s__peekChar, __pyx_k__peekChar, sizeof(__pyx_k__peekChar), 0, 0, 1, 1},
  {&__pyx_n_s__peekText, __pyx_k__peekText, sizeof(__pyx_k__peekText), 0, 0, 1, 1},
  {&__pyx_n_s__readAChar, __pyx_k__readAChar, sizeof(__pyx_k__readAChar), 0, 0, 1, 1},
  {&__pyx_n_s__readCChar, __pyx_k__readCChar, sizeof(__pyx_k__readCChar), 0, 0, 1, 1},
  {&__pyx_n_s__readCString, __pyx_k__readCString, sizeof(__pyx_k__readCString), 0, 0, 1, 1},
  {&__pyx_n_s__readChar, __pyx_k__readChar, sizeof(__pyx_k__readChar), 0, 0, 1, 1},
  {&__pyx_n_s__readEOF, __pyx_k__readEOF, sizeof(__pyx_k__readEOF), 0, 0, 1, 1},
  {&__pyx_n_s__readIdentifier, __pyx_k__readIdentifier, sizeof(__pyx_k__readIdentifier), 0, 0, 1, 1},
  {&__pyx_n_s__readInteger, __pyx_k__readInteger, sizeof(__pyx_k__readInteger), 0, 0, 1, 1},
  {&__pyx_n_s__readRange, __pyx_k__readRange, sizeof(__pyx_k__readRange), 0, 0, 1, 1},
  {&__pyx_n_s__readText, __pyx_k__readText, sizeof(__pyx_k__readText), 0, 0, 1, 1},
  {&__pyx_n_s__readUntil, __pyx_k__readUntil, sizeof(__pyx_k__readUntil), 0, 0, 1, 1},
  {&__pyx_n_s__readUntilEOF, __pyx_k__readUntilEOF, sizeof(__pyx_k__readUntilEOF), 0, 0, 1, 1},
  {&__pyx_n_s__sCBegin, __pyx_k__sCBegin, sizeof(__pyx_k__sCBegin), 0, 0, 1, 1},
  {&__pyx_n_s__sCEnd, __pyx_k__sCEnd, sizeof(__pyx_k__sCEnd), 0, 0, 1, 1},
  {&__pyx_n_s__sCLine, __pyx_k__sCLine, sizeof(__pyx_k__sCLine), 0, 0, 1, 1},
  {&__pyx_n_s__setTag, __pyx_k__setTag, sizeof(__pyx_k__setTag), 0, 0, 1, 1},
  {&__pyx_n_s__setWsList, __pyx_k__setWsList, sizeof(__pyx_k__setWsList), 0, 0, 1, 1},
  {&__pyx_n_s__stream, __pyx_k__stream, sizeof(__pyx_k__stream), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_exit = __Pyx_GetName(__pyx_b, __pyx_n_s__exit); if (!__pyx_builtin_exit) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_TypeError = __Pyx_GetName(__pyx_b, __pyx_n_s__TypeError); if (!__pyx_builtin_TypeError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_ord = __Pyx_GetName(__pyx_b, __pyx_n_s__ord); if (!__pyx_builtin_ord) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants");

  /* "asciiParse.pyx":44
 *              print\
 *       'Error : comment open tag and close tag should be 2 character long at minimum.'
 *              exit(1)             # <<<<<<<<<<<<<<
 * 
 * ##### private:
 */
  __pyx_k_tuple_8 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_8));
  __Pyx_INCREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_k_tuple_8, 0, __pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_8));

  /* "asciiParse.pyx":104
 * 	    """
 *             if (len(c) != 1):
 *               raise TypeError('readChar argument len was greater than one.')             # <<<<<<<<<<<<<<
 *             return self.__oParser.readChar(ord(c))
 * 
 */
  __pyx_k_tuple_10 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_10));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_9));
  PyTuple_SET_ITEM(__pyx_k_tuple_10, 0, ((PyObject *)__pyx_kp_s_9));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_9));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_10));

  /* "asciiParse.pyx":195
 * 	    Stop ignoring characters from wsList.
 * 	    """
 *             self.setWsList("")             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
  __pyx_k_tuple_12 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_12));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_1));
  PyTuple_SET_ITEM(__pyx_k_tuple_12, 0, ((PyObject *)__pyx_kp_s_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_12));

  /* "asciiParse.pyx":202
 * 	    Reset ignored characters list.
 * 	    """
 *             self.setWsList(" \r\n\t")             # <<<<<<<<<<<<<<
 *             return True
 * 
 */
  __pyx_k_tuple_13 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_13));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_2));
  PyTuple_SET_ITEM(__pyx_k_tuple_13, 0, ((PyObject *)__pyx_kp_s_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_13));
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initasciiParse(void); /*proto*/
PyMODINIT_FUNC initasciiParse(void)
#else
PyMODINIT_FUNC PyInit_asciiParse(void); /*proto*/
PyMODINIT_FUNC PyInit_asciiParse(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_asciiParse(void)");
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __pyx_binding_PyCFunctionType_USED
  if (__pyx_binding_PyCFunctionType_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("asciiParse"), __pyx_methods, 0, 0, PYTHON_API_VERSION);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (!__pyx_m) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  #if PY_MAJOR_VERSION < 3
  Py_INCREF(__pyx_m);
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME));
  if (!__pyx_b) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main_asciiParse) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_10asciiParse_AsciiParseWrapper = &__pyx_vtable_10asciiParse_AsciiParseWrapper;
  __pyx_vtable_10asciiParse_AsciiParseWrapper.peekChar = (int (*)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, PyObject *, int __pyx_skip_dispatch))__pyx_f_10asciiParse_17AsciiParseWrapper_peekChar;
  __pyx_vtable_10asciiParse_AsciiParseWrapper.readChar = (int (*)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, PyObject *, int __pyx_skip_dispatch))__pyx_f_10asciiParse_17AsciiParseWrapper_readChar;
  __pyx_vtable_10asciiParse_AsciiParseWrapper.readEOF = (int (*)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, int __pyx_skip_dispatch))__pyx_f_10asciiParse_17AsciiParseWrapper_readEOF;
  __pyx_vtable_10asciiParse_AsciiParseWrapper.readUntil = (int (*)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_10asciiParse_17AsciiParseWrapper_readUntil *__pyx_optional_args))__pyx_f_10asciiParse_17AsciiParseWrapper_readUntil;
  __pyx_vtable_10asciiParse_AsciiParseWrapper.readUntilEOF = (int (*)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, int __pyx_skip_dispatch))__pyx_f_10asciiParse_17AsciiParseWrapper_readUntilEOF;
  __pyx_vtable_10asciiParse_AsciiParseWrapper.peekText = (int (*)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, char *, int __pyx_skip_dispatch))__pyx_f_10asciiParse_17AsciiParseWrapper_peekText;
  __pyx_vtable_10asciiParse_AsciiParseWrapper.readText = (int (*)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, char *, int __pyx_skip_dispatch))__pyx_f_10asciiParse_17AsciiParseWrapper_readText;
  __pyx_vtable_10asciiParse_AsciiParseWrapper.readInteger = (int (*)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, int __pyx_skip_dispatch))__pyx_f_10asciiParse_17AsciiParseWrapper_readInteger;
  __pyx_vtable_10asciiParse_AsciiParseWrapper.readIdentifier = (int (*)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, int __pyx_skip_dispatch))__pyx_f_10asciiParse_17AsciiParseWrapper_readIdentifier;
  __pyx_vtable_10asciiParse_AsciiParseWrapper.readRange = (int (*)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, PyObject *, PyObject *, int __pyx_skip_dispatch))__pyx_f_10asciiParse_17AsciiParseWrapper_readRange;
  __pyx_vtable_10asciiParse_AsciiParseWrapper.readCString = (int (*)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, int __pyx_skip_dispatch))__pyx_f_10asciiParse_17AsciiParseWrapper_readCString;
  __pyx_vtable_10asciiParse_AsciiParseWrapper.readCChar = (int (*)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, int __pyx_skip_dispatch))__pyx_f_10asciiParse_17AsciiParseWrapper_readCChar;
  __pyx_vtable_10asciiParse_AsciiParseWrapper.readAChar = (int (*)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, int __pyx_skip_dispatch))__pyx_f_10asciiParse_17AsciiParseWrapper_readAChar;
  __pyx_vtable_10asciiParse_AsciiParseWrapper.getColumnNbr = (int (*)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, int __pyx_skip_dispatch))__pyx_f_10asciiParse_17AsciiParseWrapper_getColumnNbr;
  __pyx_vtable_10asciiParse_AsciiParseWrapper.getLineNbr = (int (*)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, int __pyx_skip_dispatch))__pyx_f_10asciiParse_17AsciiParseWrapper_getLineNbr;
  __pyx_vtable_10asciiParse_AsciiParseWrapper.getIndex = (int (*)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, int __pyx_skip_dispatch))__pyx_f_10asciiParse_17AsciiParseWrapper_getIndex;
  __pyx_vtable_10asciiParse_AsciiParseWrapper.getCurrentByte = (char (*)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, int __pyx_skip_dispatch))__pyx_f_10asciiParse_17AsciiParseWrapper_getCurrentByte;
  __pyx_vtable_10asciiParse_AsciiParseWrapper.getName = (PyObject *(*)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, int __pyx_skip_dispatch))__pyx_f_10asciiParse_17AsciiParseWrapper_getName;
  __pyx_vtable_10asciiParse_AsciiParseWrapper.setTag = (PyObject *(*)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, char *, int __pyx_skip_dispatch))__pyx_f_10asciiParse_17AsciiParseWrapper_setTag;
  __pyx_vtable_10asciiParse_AsciiParseWrapper.getTag = (PyObject *(*)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, char *, int __pyx_skip_dispatch))__pyx_f_10asciiParse_17AsciiParseWrapper_getTag;
  __pyx_vtable_10asciiParse_AsciiParseWrapper.getCTag = (PyObject *(*)(struct __pyx_obj_10asciiParse_AsciiParseWrapper *, char *, int __pyx_skip_dispatch))__pyx_f_10asciiParse_17AsciiParseWrapper_getCTag;
  if (PyType_Ready(&__pyx_type_10asciiParse_AsciiParseWrapper) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  {
    PyObject *wrapper = __Pyx_GetAttrString((PyObject *)&__pyx_type_10asciiParse_AsciiParseWrapper, "__init__"); if (unlikely(!wrapper)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_10asciiParse_17AsciiParseWrapper___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_10asciiParse_17AsciiParseWrapper___init__.doc = __pyx_doc_10asciiParse_17AsciiParseWrapper___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_10asciiParse_17AsciiParseWrapper___init__;
    }
  }
  if (__Pyx_SetVtable(__pyx_type_10asciiParse_AsciiParseWrapper.tp_dict, __pyx_vtabptr_10asciiParse_AsciiParseWrapper) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "AsciiParseWrapper", (PyObject *)&__pyx_type_10asciiParse_AsciiParseWrapper) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_10asciiParse_AsciiParseWrapper = &__pyx_type_10asciiParse_AsciiParseWrapper;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "asciiParse.pyx":1
 * # Copyright (C) 2012 Candiotti Adrien             # <<<<<<<<<<<<<<
 * #
 * # This program is free software: you can redistribute it and/or modify
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    __Pyx_AddTraceback("init asciiParse", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init asciiParse");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */

#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result) {
        if (dict != __pyx_b) {
            PyErr_Clear();
            result = PyObject_GetAttr(__pyx_b, name);
        }
        if (!result) {
            PyErr_SetObject(PyExc_NameError, name);
        }
    }
    return result;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AS_STRING(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;

    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
        } else {
            #if PY_MAJOR_VERSION < 3
            if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key))) {
            #else
            if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key))) {
            #endif
                goto invalid_keyword_type;
            } else {
                for (name = first_kw_arg; *name; name++) {
                    #if PY_MAJOR_VERSION >= 3
                    if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                        PyUnicode_Compare(**name, key) == 0) break;
                    #else
                    if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                        _PyString_Eq(**name, key)) break;
                    #endif
                }
                if (*name) {
                    values[name-argnames] = value;
                } else {
                    /* unexpected keyword found */
                    for (name=argnames; name != first_kw_arg; name++) {
                        if (**name == key) goto arg_passed_twice;
                        #if PY_MAJOR_VERSION >= 3
                        if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                            PyUnicode_Compare(**name, key) == 0) goto arg_passed_twice;
                        #else
                        if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                            _PyString_Eq(**name, key)) goto arg_passed_twice;
                        #endif
                    }
                    if (kwds2) {
                        if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
                    } else {
                        goto invalid_keyword;
                    }
                }
            }
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, **name);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;

    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%s() takes %s %"PY_FORMAT_SIZE_T"d positional argument%s (%"PY_FORMAT_SIZE_T"d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();

    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}

static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;

    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}


#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    /* cause is unused */
    Py_XINCREF(type);
    Py_XINCREF(value);
    Py_XINCREF(tb);
    /* First, check the traceback argument, replacing None with NULL. */
    if (tb == Py_None) {
        Py_DECREF(tb);
        tb = 0;
    }
    else if (tb != NULL && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto raise_error;
    }
    /* Next, replace a missing value with None */
    if (value == NULL) {
        value = Py_None;
        Py_INCREF(value);
    }
    #if PY_VERSION_HEX < 0x02050000
    if (!PyClass_Check(type))
    #else
    if (!PyType_Check(type))
    #endif
    {
        /* Raising an instance.  The value should be a dummy. */
        if (value != Py_None) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        /* Normalize to raise <class>, <instance> */
        Py_DECREF(value);
        value = type;
        #if PY_VERSION_HEX < 0x02050000
            if (PyInstance_Check(type)) {
                type = (PyObject*) ((PyInstanceObject*)type)->in_class;
                Py_INCREF(type);
            }
            else {
                type = 0;
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception must be an old-style class or instance");
                goto raise_error;
            }
        #else
            type = (PyObject*) Py_TYPE(type);
            Py_INCREF(type);
            if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception class must be a subclass of BaseException");
                goto raise_error;
            }
        #endif
    }

    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}

#else /* Python 3+ */

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;

    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (!PyExceptionClass_Check(type)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }

    if (cause) {
        PyObject *fixed_cause;
        if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        }
        else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        }
        else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        if (!value) {
            value = PyObject_CallObject(type, NULL);
        }
        PyException_SetCause(value, fixed_cause);
    }

    PyErr_SetObject(type, value);

    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }

bad:
    return;
}
#endif


#if PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}

static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    PyObject* v;
    int i;

    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                return -1;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            return -1;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0 &&
                isspace(Py_CHARMASK(s[len-1])) &&
                s[len-1] != ' ')
                    PyFile_SoftSpace(f, 0);
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            return -1;
        PyFile_SoftSpace(f, 0);
    }
    return 0;
}

#else /* Python 3 has a print function */

static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = __Pyx_GetAttrString(__pyx_b, "print");
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItemString(kwargs, "file", stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItemString(kwargs, "end", end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItemString(__pyx_print_kwargs, "end", end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}

#endif

#if PY_MAJOR_VERSION < 3

static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            return -1;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        return -1;
    if (PyFile_WriteString("\n", f) < 0)
        return -1;
    return 0;
    /* the line below is just to avoid compiler
     * compiler warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}

#else /* Python 3 has a print function */

static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_New(1);
    if (unlikely(!arg_tuple))
        return -1;
    Py_INCREF(o);
    PyTuple_SET_ITEM(arg_tuple, 0, o);
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}

#endif

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return (unsigned long)PyLong_AsUnsignedLong(x);
        } else {
            return (unsigned long)PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return (unsigned PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (unsigned PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return (long)PyLong_AsUnsignedLong(x);
        } else {
            return (long)PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return (PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return (signed long)PyLong_AsUnsignedLong(x);
        } else {
            return (signed long)PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return (signed PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (signed PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItemString(dict, "__pyx_vtable__", ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"

static void __Pyx_AddTraceback(const char *funcname, int __pyx_clineno,
                               int __pyx_lineno, const char *__pyx_filename) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyObject *py_globals = 0;
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;

    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(__pyx_filename);
    #else
    py_srcfile = PyUnicode_FromString(__pyx_filename);
    #endif
    if (!py_srcfile) goto bad;
    if (__pyx_clineno) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_code = PyCode_New(
        0,            /*int argcount,*/
        #if PY_MAJOR_VERSION >= 3
        0,            /*int kwonlyargcount,*/
        #endif
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple,  /*PyObject *consts,*/
        __pyx_empty_tuple,  /*PyObject *names,*/
        __pyx_empty_tuple,  /*PyObject *varnames,*/
        __pyx_empty_tuple,  /*PyObject *freevars,*/
        __pyx_empty_tuple,  /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        __pyx_lineno,   /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    if (!py_code) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = __pyx_lineno;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

/* Type Conversion Functions */

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}

static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
